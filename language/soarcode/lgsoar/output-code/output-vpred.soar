
###################### these output terms for verbal external and internal arguments
# output the external and internal argument (if it exists) for the verb
sp {global*apply*generate-predicates*output*ext/int*arg
   (state <s> ^model.idea <idea> ^final-predicates <fp>
              ^operator.name generate-predicates) 
   (<idea> ^<< ext int int-second >> <thisroleval> ^nuc <nucval> ^annotation pred-adj/noun-tested)
   (<thisroleval> ^nuc <thisnucval> -^annotation pred-adj/noun 
                 -^annotation in-n-n)
-->
   (<thisroleval> ^annotation pred-dumped +)
   (<fp> ^predicate <pred>)
   (<pred> ^outer <thisnucval>
           ^inner1 <thisroleval>)
}

# now output the term for the predicate adjective; NOTE: have to find the subject's variable
sp {global*apply*generate-predicates*output*int*pred-adj
   (state <s> ^model.idea <idea> ^final-predicates <fp>
              ^operator.name generate-predicates) 
   (<idea> ^int <thisroleval> ^nuc <nucval>)
   (<thisroleval> ^nuc <thisnucval> ^annotation pred-adj/noun ^aug.ext <thesubject> -^annotation pred-pp
   -^annotation in-n-n)
-->
   (<thisroleval> ^annotation pred-dumped +)
   (<idea> ^annotation pred-dumped +) # a white lie 
   (<fp> ^predicate <pred>)
   (<pred> ^outer <thisnucval>
           ^inner1 <thesubject>)
}

# intransitive predicate terms
sp {global*apply*generate-predicates*output*predicate-itrx
   (state <s> ^model.idea <idea> ^final-predicates <fp>
              ^operator.name generate-predicates)
   (<idea> ^ext <extval> ^nuc <nucval> -^int <any> -^int-second <any> -^annotation copula)
   (<extval> ^nuc <extnucval> ^annotation pred-dumped)
-->
   (<idea> ^annotation pred-dumped + ^annotation intransitive +)
   (<fp> ^predicate <pred>)
   (<pred> ^outer <nucval>
           ^inner1 <extval>)
}


# transitive predicate terms
sp {global*apply*generate-predicates*output*predicate-trx
   (state <s> ^model.idea <idea> ^final-predicates <fp> ^operator.name generate-predicates)
   (<idea> ^ext <extval> ^nuc <nucval> ^int <intval> -^annotation copula)
   (<extval> ^nuc <extnucval> ^annotation pred-dumped)
-->
   (<extval> ^annotation pred-dumped +)
   (<intval> ^annotation pred-dumped +)
   (<idea> ^annotation pred-dumped + ^annotation transitive +)
   (<fp> ^predicate <pred>)
   (<pred> ^outer <nucval>
           ^inner1 <extval>
           ^inner2 <intval>)
}

# the man sent the lawyer a letter .

# ditransitive predicates
sp {global*apply*generate-predicates*output*predicate-ditrx
   (state <s> ^model.idea <idea> ^final-predicates <fp> ^operator.name generate-predicates) 
   (<idea> ^ext <extval> ^nuc <nucval> ^int <intval> ^int-second <int2val>)
   (<extval> ^nuc <extnucval> ^annotation pred-dumped)
-->
   (<extval> ^annotation pred-dumped +)
   (<intval> ^annotation pred-dumped +)
   (<int2val> ^annotation pred-dumped +)
   (<idea> ^annotation pred-dumped +)
   (<fp> ^predicate <pred>)
   (<pred> ^outer <nucval>
           ^inner1 <extval>
           ^inner2 <intval>
           ^inner3 <int2val>)
}

# transitive predicate terms, marked as ditransitive
# "pick up the block": the pick->block link is an Osn, presumably because of
# the "up"
sp {global*apply*generate-predicates*output*predicate-trx*fake-ditrx
   (state <s> ^model.idea <idea> ^final-predicates <fp>
              ^operator.name generate-predicates)
   (<idea> ^ext <extval> ^nuc <nucval> -^int <int-plain-val> ^int-second <intval>)
   (<extval> ^nuc <extnucval> ^annotation pred-dumped)
-->
   (<extval> ^annotation pred-dumped +)
   (<intval> ^annotation pred-dumped +)
   (<idea> ^annotation pred-dumped + ^annotation transitive +)
   (<fp> ^predicate <pred>)
   (<pred> ^outer <nucval>
           ^inner1 <extval>
           ^inner2 <intval>)
}
