# File: interpret.soar
# Author: William Taysom
# Version 2.0: July 24, 2001
# Created: July 7, 2001
#
# Desc: Provides semantic interpretation of lgtree syntax.
#
# Operators: give-root-ref (160), add-arg (150), transfer-for-remove-temp (140-130),
#
# Interpretations:
#		S as external, S-P as passive, S-I as inflected, O as internal, D as definite description,
#		D as indefinite description, MV-J as a preposition, AN as augmentation, E as mode,
#		I as inflection, I/N as negation, D as possessive
#
#
# 7 June 2011 DWL for soar9: added o-support, removed attr preferences
#

## give-root-ref

sp {interpret*propose*give-root-ref
   (state <s>  ^current-sentence <cs> ^root <root>)
   (<cs> ^words.word <root-word>)
   (<root-word> ^wcount <root> -^ref -^hidden ref ^wvalue <value>)
-->
   (<s> ^operator <o> +)
   (<o> ^name give-root-ref ^priority 160 ^root-word <root-word> ^sentence <cs>
        ^order <root-count> 
        ^debug-info (concat |adding a reference for root "| <value> |"|))
}

sp {interpret*apply*give-root-ref
 #   :o-support
   (state <s> ^operator <o> ^current-refset <refs>)
   (<o> ^name give-root-ref ^root-word <root-word>  ^sentence <cs>)
-->
   (<refs> ^ref <ref> +)
   (<root-word> ^ref <ref>)
   (<ref> ^head <root-word> ^rooted-in <cs>)
}

## add-arg
# proposals

sp	{interpret*propose*S*as*external
   (state <s> ^current-sentence <cs>)
   (<cs> ^links.link <link> ^words.word <ext> <main>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<ext> ^wcount <ext-count>)
   (<link> ^ltype S ^lwleft <ext-count> ^lwright <main-count> -^handled-as)
-->
   (<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug ext ^arg <ext> ^link <link>
   	 ^kind single ^order <ext-count> ^level-two-order <main-count>)
}

sp {interpret*propose*O*as*internal
   (state <s> ^current-sentence <cs>)
   (<cs> ^links.link <link> ^words.word <int> <main>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<int> ^wcount <int-count>)
   (<link> ^ltype O ^lwleft <main-count> ^lwright <int-count> -^handled-as -^ltypesub n)
-->
   (<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug int ^arg <int> ^link <link>
   	    ^kind single ^order <main-count> ^level-two-order <int-count>)
}

# SBW 4/26/12
# handling the ditransitive case separately, this prevents it from being
# aliased with conjunctive direct objects ("get the block and the ball")
# Now, if something has two ints, those are considered multiple instantiations
# of the verb (conjunction) rather than two objects for the same instanitation.
sp {interpret*propose*O*as*internal*ditransitive
   (state <s> ^current-sentence <cs>)
   (<cs> ^links.link <link> ^words.word <int> <main>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<int> ^wcount <int-count>)
   (<link> ^ltype O ^lwleft <main-count> ^lwright <int-count> -^handled-as ^ltypesub n)
-->
   (<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug int-second ^arg <int> ^link <link>
   	    ^kind single ^order <main-count> ^level-two-order <int-count>)
}

sp {interpret*propose*S-P*as*passive
   (state <s> ^current-sentence <cs>)
   (<cs> ^links.link <S-link> <P-link> ^words.word <int> <infl> <main>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<infl> ^wcount <infl-count>)
   (<int> ^wcount <int-count>)
   (<P-link> ^ltype P ^lwright <main-count> ^lwleft <infl-count>)
   (<S-link> ^ltype S ^lwright <infl-count> ^lwleft <int-count> -^handled-as)
-->
   (<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug int ^arg <int> ^link <S-link>
   	 ^kind single ^order <int-count> ^level-two-order <main-count> )}

sp {interpret*propose*S-I*as*inflected
   (state <s> ^current-sentence <cs>)
   (<cs> ^links.link <S-link> <I-link> ^words.word <ext> <infl> <main>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<infl> ^wcount <infl-count>)
   (<ext> ^wcount <ext-count>)
   (<I-link> ^ltype I ^lwright <main-count> ^lwleft <infl-count>)
   (<S-link> ^ltype S ^lwright <infl-count> ^lwleft <ext-count> -^handled-as)
-->
   (<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug ext ^arg <ext> ^link <S-link>
   	 ^kind single ^order <ext-count> ^level-two-order <main-count> )}
     

# added for interrogatives
sp {interpret*propose*SI*as*external
   (state <s> ^current-sentence <cs>)
   (<cs> ^links.link <link> ^words.word <ext> <main>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<ext> ^wcount <ext-count>)
   (<link> ^ltype SI ^lwright <ext-count> ^lwleft <main-count> -^handled-as)
-->
   (<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug ext ^arg <ext> ^link <link>
   	 ^kind single ^order <ext-count> ^level-two-order <main-count>
   	 )}

sp {interpret*propose*Q*as*question
   (state <s> ^current-sentence <cs>)
   (<cs> ^links.link <link> ^words.word  <main>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<link> ^ltype Q ^lwright <main-count> -^handled-as)
-->
   (<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug questioned ^arg true ^link <link>
   	 ^kind constant ^order <main-count> ^level-two-order <main-count> )
   	 )}
	
# SBW 5/30/12
# change for BOLT:
# we care about this/that/the distinctions, so I'm splitting this to preserve
# "this" and "that"

# sp {interpret*propose*D*as*definite-description
#    (state <s> ^current-sentence <cs>)
#    (<cs> ^links.link <link> ^words.word <def-desc> <main>)
#    (<main> ^ref <ref> ^wcount <main-count>)
#    (<def-desc> ^wvalue << the this that >> ^wcount <def-desc-count>)
#    (<link> ^ltype D ^lwleft <def-desc-count> ^lwright <main-count> 
#    -^handled-as)
# -->
#    (<s> ^operator <o> +)
#    (<o> ^name add-arg ^priority 150 ^main <main> ^aug desc ^arg <desc> ^link <link>
#    	 ^kind constant ^order <def-desc-count> ^level-two-order <main-count> )
#    (<desc> ^word <def-desc> ^feature DEF)
#  }

sp {interpret*propose*D*as*definite-description
   (state <s> ^current-sentence <cs>)
   (<cs> ^links.link <link> ^words.word <def-desc> <main>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<def-desc> ^wvalue the ^wcount <def-desc-count>)
   (<link> ^ltype D ^lwleft <def-desc-count> ^lwright <main-count> 
   -^handled-as)
-->
   (<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug desc ^arg <desc> ^link <link>
   	 ^kind constant ^order <def-desc-count> ^level-two-order <main-count> )
   (<desc> ^word <def-desc> ^feature DEF)
 }

sp {interpret*propose*D*as*definite-description*word
   (state <s> ^current-sentence <cs>)
   (<cs> ^links.link <link> ^words.word <def-desc> <main>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<def-desc> ^wvalue {<< this that >> <val>}  ^wcount <def-desc-count>)
   (<link> ^ltype D ^lwleft <def-desc-count> ^lwright <main-count> 
   -^handled-as)
-->
   (<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug desc ^arg <desc> ^link <link>
   	 ^kind constant ^order <def-desc-count> ^level-two-order <main-count> )
   (<desc> ^word <def-desc> ^feature <val>)
 }
sp {interpret*propose*Dw*as*question-word
   (state <s> ^current-sentence <cs>)
   (<cs> ^links.link <link> ^words.word <def-desc> <main>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<def-desc> ^wvalue <wval> ^wcount <def-desc-count>)
   (<link> ^ltype D ^ltypesub w ^lwleft <def-desc-count> ^lwright <main-count> 
   -^handled-as)
-->
   (<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug desc ^arg <desc> ^link <link>
   	 ^kind constant ^order <def-desc-count> ^level-two-order <main-count> )
   (<desc> ^word <def-desc> ^feature <wval>)
 }

sp {interpret*propose*D*as*indefinite-description
   (state <s> ^current-sentence <cs>)
   (<cs> ^links.link <link> ^words.word <indef-desc> <main>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<indef-desc> ^wvalue << a an >> ^wcount <indef-desc-count>)
   (<link> ^ltype D ^lwleft <indef-desc-count> ^lwright <main-count> -^handled-as)
-->
   (<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug desc ^arg <desc> ^link <link>
   	 ^kind constant ^order <indef-desc-count> ^level-two-order <main-count> )
   (<desc> ^word <indef-desc> ^feature INDEF)
}

sp {interpret*propose*D*as*possessive
   (state <s> ^current-sentence <cs>)
   (<cs> ^links.link <link> ^words.word <pos-pro> <main>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<pos-pro> ^wcount <pos-pro-count> ^wvalue << his her its my your >>)
   (<link> ^ltype D ^lwleft <pos-pro-count> ^lwright <main-count> -^handled-as)
-->
   (<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug pos ^arg <pos-pro> ^link <link>
   	 ^kind single ^order <pos-pro-count> ^level-two-order <main-count> )
}

sp {interpret*propose*I*as*inflection
   (state <s> ^current-sentence <cs>)
   (<cs> ^links.link <link> ^words.word <infl> <main>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<infl> ^wcount <infl-count> ^wvalue <wvalue>)
   (<link> ^ltype I ^lwleft <infl-count> ^lwright <main-count> -^handled-as)
-->
   (<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug infl ^arg <wvalue> ^link <link>
   	 ^kind constant ^order <infl-count> ^level-two-order <main-count> )}

sp {interpret*propose*E*as*mode
   (state <s> ^current-sentence <cs>)
   (<cs> ^links.link <link> ^words.word <mode> <main>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<mode> ^wcount <mode-count> ^wvalue <wvalue>)
   (<link> ^ltype E ^lwleft <mode-count> ^lwright <main-count> -^handled-as)
-->
   (<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug mode ^arg <wvalue> ^link <link>
   	 ^kind constant ^order <mode-count> ^level-two-order <main-count> )}

sp {interpret*propose*I/N*as*negation
   (state <s> ^current-sentence <cs>)
   (<cs> ^links.link <I-link> <N-link> ^words.word <infl> <main> <neg>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<infl> ^wcount <infl-count>)
   (<neg> ^wcount <neg-count> ^wvalue not)
   (<I-link> ^ltype I ^lwleft <infl-count> ^lwright <main-count>)
   (<N-link> ^ltype N ^lwleft <infl-count> ^lwright <neg-count> -^handled-as)
-->
	(<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug neg ^arg not ^link <N-link>
   	 ^kind constant ^order <neg-count> ^level-two-order <main-count> )}

sp {interpret*propose*MV-J*as*preposition
   (state <s> ^current-sentence <cs>)
   (<cs> ^links.link <MV-link> <J-link> ^words.word <prep-obj> <prep> <main>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<prep> ^wvalue <aug> ^wcount <prep-count>)
   (<prep-obj> ^wcount <prep-obj-count>)
   (<MV-link> ^ltype << MV M P >> ^lwleft <main-count> ^lwright <prep-count> -^handled-as)
   (<J-link> ^ltype J ^lwleft <prep-count> ^lwright <prep-obj-count>)
  -{(<cs> ^links.link {<> <J-link> <other>})
    (<other> ^ltype J ^lwleft <prep-count> ^lwright <other-prep-obj-count>)} # not two Js (see below)
-->
   (<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug <aug> ^arg <prep-obj> ^link <MV-link>
   	 ^kind single ^order <main-count> ^level-two-order <prep-count> 
     ^preposition true)
}
 
# SBW added this for things like "between a and b", that appears as an M link
# to between, and two J links to a and b. 
sp {interpret*propose*MV-J*as*preposition*double
   (state <s> ^current-sentence <cs>)
   (<cs> ^links.link <MV-link> <J-link> <other-J-link> ^words.word <prep-obj> <prep2-obj> <prep> <main>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<prep> ^wvalue <aug> ^wcount <prep-count>)
   (<MV-link> ^ltype << MV M P >> ^lwleft <main-count> ^lwright <prep-count> -^handled-as)
   (<J-link> ^ltype J ^lwleft <prep-count> ^lwright <prep-obj-count>)
   (<prep-obj> ^wcount <prep-obj-count>)
   (<other-J-link> ^ltype J ^lwleft <prep-count> ^lwright {> <prep-obj-count> <prep2-obj-count>})
   (<prep2-obj> ^wcount <prep2-obj-count>)
-->
   (<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug <aug> ^arg1 <prep-obj> ^arg2 <prep2-obj> ^link <MV-link>
   	 ^kind double ^order <main-count> ^level-two-order <prep-count> 
     ^preposition true
     ^arg1-order <prep-obj-count>
     ^arg2-order <prep2-obj-count>)
}
 

# SBW 4/9/2012 changed aug to aug1 to represent similar to adjective.
# implications?
sp {interpret*propose*AN*as*noun-auging-noun
   (state <s> ^current-sentence <cs>)
   (<cs> ^links.link <link> ^words.word <main> <arg>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<arg> ^wcount <arg-count>)
   (<link> ^ltype AN ^lwleft <arg-count> ^lwright <main-count> -^handled-as)
-->
   (<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug aug1 ^arg <arg> ^link <link>
   	 ^kind single-side ^order <main-count> ^level-two-order <arg-count> )}

# SBW 4/27/2012
# Handle post-noun adjectives: "This is the block available."
# (added to handle a parse error, but still correct so I'm leaving it in)
sp {interpret*propose*M*as*adj-auging-noun
   (state <s> ^current-sentence <cs>)
   (<cs> ^links.link <link> ^words.word <main> <arg>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<arg> ^wcount <arg-count>)
   (<link> ^ltype M ^ltypesub a ^lwright <arg-count> ^lwleft <main-count> -^handled-as)
-->
   (<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug aug1 ^arg <arg> ^link <link>
   	 ^kind single-side ^order <main-count> ^level-two-order <arg-count>)
}

# applications

sp {interpret*apply*single-add-arg*if*arg-is-constant*feature+word
   (state <s> ^operator <o> ^current-refset <refs>)
   (<o> ^name add-arg ^main <main> ^aug <aug> ^arg <cons-arg> ^link <link> ^kind constant)
   (<main> ^ref <main-ref>)
   (<cons-arg> ^feature <fval> ^word <wval>)
-->
   (<main-ref> ^<aug> <dfoo> +)
   (<dfoo> ^feature <fval> + ^word <wval> +)
   (<link> ^handled-as <aug> +)
 }

sp {interpret*apply*single-add-arg*if*arg-is-constant*no-substructure
   (state <s> ^operator <o> ^current-refset <refs>)
   (<o> ^name add-arg ^main <main> ^aug <aug> ^arg <cons-arg> ^link <link> ^kind constant -^arg.feature)
   (<main> ^ref <main-ref>)
-->
   (<main-ref> ^<aug> <cons-arg> +)
   (<link> ^handled-as <aug> +) 
}

sp {interpret*apply*single-side-add-arg
   (state <s> ^operator <o> ^current-refset <refs>)
   (<o> ^name add-arg ^main <main> ^aug <aug> ^arg <arg> ^link <link> ^kind single-side)
   (<main> ^ref <main-ref>)
   (<arg> -^ref)
-->
   (<main-ref> ^<aug> <arg-ref> +)
   (<refs> ^ref <arg-ref> +)
   (<arg-ref> ^head <arg> ^center nil)
   (<arg> ^ref <arg-ref>)
   (<link> ^handled-as <aug>)
}
sp {interpret*apply*single-add-arg*if*arg-requires-ref
   (state <s> ^operator <o> ^current-refset <refs>)
   (<o> ^name add-arg ^main <main> ^aug <aug> ^arg <arg> ^link <link> ^kind single)
   (<main> ^ref <main-ref>)
   (<arg> -^ref)
-->
   (<main-ref> ^<aug> <arg-ref> +)
   (<refs> ^ref <arg-ref> +)
   (<arg-ref> ^head <arg>)
   (<arg> ^ref <arg-ref>)
   (<link> ^handled-as <aug>)
}

# SBW removing this, unmatchable (nothing creates arg-word on that operator)
# presumably, this means args never have refs, or add-arg would operator
# no-change

# If this is needed, probably also need a double equivalent

# sp {interpret*apply*single-add-arg*if*arg-has-ref
#    (state <s> ^operator <o> ^current-refset <refs>)
#    (<o> ^name add-arg ^main <main> ^aug <aug> ^arg-word <arg> ^link <link> ^kind single)
#    (<main> ^ref <main-ref>)
#    (<arg> ^ref <arg-ref>)
# -->
#    (<main-ref> ^<aug> <arg-ref> +)
#    (<link> ^handled-as <aug>)
# }

sp {interpret*apply*double-add-arg*if*arg-requires-ref
   (state <s> ^operator <o> ^current-refset <refs>)
   (<o> ^name add-arg ^main <main> ^aug <aug> ^arg1 <arg> ^arg2 <arg2> ^link <link> ^kind double
        ^arg1-order <a1o>
        ^arg2-order <a2o>)
   (<main> ^ref <main-ref>)
   (<arg> -^ref)
-->
   (<main-ref> ^<aug> <arg-ref>
               ^<aug> <arg2-ref>)
   (<refs> ^ref <arg-ref> 
           ^ref <arg2-ref>)
   (<arg-ref> ^head <arg>
              ^order <a1o>)
   (<arg2-ref> ^head <arg2>
               ^order <a2o>)
   (<arg> ^ref <arg-ref>)
   (<arg2> ^ref <arg2-ref>)
   (<link> ^handled-as <aug>)
}

sp {interpret*apply*add-arg*flag-preposition
   (state <s> ^operator <o> ^current-refset <cr>)
   (<o> ^name add-arg ^preposition true
        ^main <main> ^aug <aug>)
   (<main> ^ref <main-ref>)
-->
   (<main-ref> ^preposition-lex <aug>)
}

### below here moved from non-cligdump93.soar in original LGSoar 2.0 release

## from adj-prods.soar

#---------The following section contains Soar productions that add Link-Grammar link infor to the state---------#

sp {interpret*propose*P*as*internal
	(state <s> ^current-sentence <lgs>)
	(<lgs> ^links.link <link> ^words.word <int> <main>)

#<main> is for those that contain a ^ref <ref> and a ^wcount <main-count>
#<int> is for those that don't contain a ^ref <ref>, but do have a ^wcount <int-count>	
	(<main> ^ref <ref> ^wcount <main-count>)
	(<int> ^wcount <int-count>)
	## not predicate PP, though...so block ^ltypesub p
	(<link> ^ltype P -^ltypesub p ^lwleft <main-count> ^lwright <int-count> -^handled-as)
-->
	(<s> ^operator <o> +)
	(<o> ^name add-arg ^priority 150 ^main <main> ^aug int ^arg <int> ^link <link>
		 ^kind single ^order <main-count> ^level-two-order <int-count>)
}

# SBW 7/5/2012: Handle "the stove is on", but also "pick up the phone"
#                                   ^K-link             ^K-link
sp {interpret*propose*K*as*internal
	(state <s> ^current-sentence <lgs>)
	(<lgs> ^links.link <link> ^words.word <int> <main>)
	(<main> ^ref <ref> ^wcount <main-count> ^wvalue << is are am were be was >>)
	(<int> ^wcount <int-count>)
	(<link> ^ltype K ^lwleft <main-count> ^lwright <int-count> -^handled-as)
-->
	(<s> ^operator <o> +)
	(<o> ^name add-arg ^priority 150 ^main <main> ^aug int ^arg <int> ^link <link>
		 ^kind single ^order <main-count> ^level-two-order <int-count>)
}

sp {|interpret*propose*A*as*adj-auging-noun|
    (state <s> ^current-sentence <cs>)
    (<cs> ^words <w*1> ^links <l*1>)
    (<w*1> ^word <arg> ^word <main>)
    (<arg> ^wcount <arg-count>)
    (<main> ^wcount <main-count> ^ref <ref>)
    (<l*1> ^link <link>)
    (<link> -^handled-as <h*1> ^lwleft <arg-count> ^lwright <main-count>
          ^ltype |A| )
    -->
    (<s> ^operator <o> +)
    (<o> ^name add-arg + ^priority 150 + ^main <main> + ^aug aug1 + 
           ^arg <arg> + ^link <link> + ^kind single-side +
           ^order <main-count> + ^level-two-order <arg-count> +
            +)
}


sp {interpret*propose*D*as*negative-description
	(state <s> ^current-sentence <cs>)
	(<cs> ^links.link <link> ^words.word <neg-desc> <main>)
	(<main> ^ref <ref> ^wcount <main-count>)
	(<neg-desc> ^wvalue << no >> ^wcount <neg-desc-count>)
	(<link> ^ltype D ^lwleft <neg-desc-count> ^lwright <main-count> -^handled-as)
-->
	(<s> ^operator <o> +)
	(<o> ^name add-arg ^priority 170 ^main <main> ^aug desc ^arg <desc> ^link <link>
		 ^kind constant ^order <neg-desc-count> ^level-two-order <main-count> )
	(<desc> ^word <neg-desc> ^feature neg)
}
