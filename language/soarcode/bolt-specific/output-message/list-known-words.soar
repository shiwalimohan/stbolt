# create substate when the following state
#(I10 ^relation-question I6)
#  (I6 ^question-word what)
#  (I6 ^relation R42)
#    (R42 ^p1 P30)
#      (P30 ^object I4)
#        (I4 ^specifier none)
#        (I4 ^word words)
#        (I4 ^word UNKNOWN)
#    (R42 ^p2 P31)
#      (P31 ^object I5)
#        (I5 ^specifier none)
#        (I5 ^word SELF)
#    (R42 ^word known-by)
sp {list-words*propose
   (state <s> ^nl.input-link.message <message>
              ^superstate nil) 
   (<message> ^relation-question <rq>)
   (<rq> ^question-word what
         ^relation.p1.object.word words
         ^relation.p2.object.word SELF
         ^relation.word known-by)
-->
   (<s> ^operator <o> + >)
   (<o> ^name list-words
        ^nl-message <message>)
}

sp {list-words*propose*init-state
   (state <s> ^superstate.operator <o>
             -^nl-message)
   (<o> ^name list-words
        ^nl-message <message>)
-->
   (<s> ^operator <o2> + >)
   (<o2> ^name init-state
         ^nl-message <message>)
}

sp {list-words*apply*init-state
   (state <s> ^operator <o>)
   (<o> ^name init-state
        ^nl-message <message>)
-->
   (<s> ^problem-space message-interpretation
        ^name list-words
        ^nl-message <message>)
}

# propose subgoal to look up noun/adjective
sp {list-words*propose*look-up-noun-adjective
   (state <s> ^name list-words
             -^nouns.name finished)
-->
   (<s> ^operator <o> + =)
   (<o> ^name look-up-noun-adjective
        ^category name)
}

# propose subgoal to generate noun message
sp {list-words*propose*generate-noun-message
   (state <s> ^name list-words
              ^nouns.name finished
             -^nouns.name message-generated)
-->
   (<s> ^operator <o> +)
   (<o> ^name generate-noun-message
        ^category name)
}

sp {list-words*propose*no-words
   (state <s> ^name list-words
             -^msg <msg>
              ^smem.result.failure)
-->
   (<s> ^operator <o> + =)
   (<o> ^name no-words)
}

# create a message which says "I don't know any words."
sp {list-words*apply*no-words
   (state <s> ^name list-words
              ^operator <o>)
   (<o> ^name no-words)
-->
   (<s> ^msg <msg>)
   (<msg> ^first <w1>
          ^word <w1> <w2> <w3> <w4> <w5> <w6>
          ^last <w6>)
   (<w1> ^value I
         ^next <w2>)
   (<w2> ^value |don't|
         ^next <w3>)
   (<w3> ^value know
         ^next <w4>)
   (<w4> ^value any
         ^next <w5>)
   (<w5> ^value words
         ^next <w6>)
   (<w6> ^value |.|)
}

sp {list-words*propose*create-message
   (state <s> ^name list-words
              ^smem.result.success <cue>
              ^smem.result.retrieved <identifier>)
   (<identifier> ^category <cat>
          ^word <word>)
 -{(<s> ^msg <msg>
        ^name list-words)
   (<msg> ^word <word>
          ^category <cat>
          ^smem-id)}
-->
  (<s> ^operator <o> + =)
  (<o> ^name create-message
       ^word <word>
       ^category <cat>
       ^smem-cue <cue>
       ^smem-id <id>)
}

# create a message which says "<word> is a <category>"
sp {list-words*apply*create-message
   (state <s> ^name list-words
              ^operator <o>)
   (<o> ^name create-message
        ^word <word>
        ^category <cat>
        ^smem-cue <cue>
        ^smem-id <id>)
-->
   (<s> ^msg <msg>
        ^smem.command.store <id>)
   (<msg> ^word <word>
          ^category <cat>
          ^first <w1>
          ^word <w1> <w2> <w3> <w4> <w5>
          ^last <w5>)
   (<w1> ^value (capitalize-symbol <word>)
         ^next <w2>)
   (<w2> ^value is
         ^next <w3>)
   (<w3> ^value a
         ^next <w4>)
   (<w4> ^value <cat>
         ^next <w5>)
   (<w5> ^value |.|)
   (<id> ^looked-up true)
}

# change "a" to "an" if first letter in next word is a vowel
# (not handling h-words and acronyms) a e i o u
#sp {list-words*propose*use-an
#   (state <s> ^name list-words
#              ^msg <msg>)
#   (<msg> ^word <word>)
#   (<word> ^value a
#           ^next <nword>)
#   (<nword> ^value {>= a < b})
#-->
#   (<s> ^operator <o> + =)
#   (<o> ^name use-an
#        ^word <word>)
#}
#
#sp {list-words*apply*use-an
#   (state <s> ^name list-words
#              ^operator <o>)
#   (<o> ^name use-an
#        ^word <word>)
#-->
#   (<word> ^value a - an)
#}

sp {list-words*propose*copy-to-output-link
   (state <s> ^name list-words
              ^msg <msg>
             -^copied)
-->
   (<s> ^operator <o> + <)
   (<o> ^name copy-to-output-link
        ^msg <msg>)
}

sp {list-words*apply*copy-to-output-link
   (state <s> ^name list-words
              ^operator <o>
              ^top-state.io.output-link <ol>)
   (<o> ^name copy-to-output-link
        ^msg <msg>)
-->
   (<ol> ^message <msg>)
   (<s> ^copied true)
}

sp {list-words*propose*delete-nl-message
   (state <s> ^name list-words
              ^copied true
              ^nl-message <message>
              ^top-state <ts>)
   (<ts> ^nl.input-link <nl-il>)
-->
   (<s> ^operator <o> +)
   (<o> ^name delete-nl-message
        ^nl-message <message>
        ^nl-input-link <nl-il>)
}

sp {list-words*apply*delete-nl-message
   (state <s> ^name list-words
              ^operator <o>)
   (<o> ^name delete-nl-message
        ^nl-message <message>
        ^nl-input-link <nl-il>)
-->
   (<nl-il> ^message <message> -)
}