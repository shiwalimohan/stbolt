# examine the words before parsing, possibly swapping them out based on Soar
# knowledge.
# Soar knowledge to mess with the sentence before the parser sees it goes here.
# Learned words will be looked up in semantic memory here, and replaced with
# generics. Possibly all words.


# preprocessing flow:
# -sentence appears on io.input-link.lg.sentence
#  structure: sentence.words.word [wvalue wcount]
# -preprocessing goal takes over, builds io.output-link.preprocessed-sentence
#  structure: preprocessed-sentence.start [word next] [word next] ..

# copy the sentence to the state, deep copy so it can be modified

sp {preprocess-sentence*elaborate*init
  (state <s> ^name preprocess-sentence
             ^superstate.operator.original-sentence <sent>)
   (<sent> ^sentence-count <sc>)
-->
   (<s> ^sentence <copy>)
   (<copy> ^sentence-count <sc>)
   (<s> ^learnable-word-type *nounjective
        ^learnable-word-type *verb+with+nothing
        ^learnable-word-type *verb+with+preposition
        ^learnable-word-type *verb+with+direct+object
        ^learnable-word-type *verb+with+direct+object+and+preposition)
}

sp {preprocess-sentence*elaborate*copy-word
   (state <s> ^name preprocess-sentence
              ^superstate.operator.original-sentence.words.word <wd>
              ^sentence <copy>)
   (<wd> ^wcount <wc>
         ^wvalue <wv>)
-->
   (<copy> ^word <copy-word>)
   (<copy-word> ^wcount <wc>
                ^real-wvalue <wv>)
}

sp {preprocess-sentence*elaborate*real-wvalue*fixed
   (state <s> ^name preprocess-sentence
              ^sentence.word <wd>)
   (<wd> ^real-wvalue { <wv> << what which where is a an the this that those these and
                                color shape size of one object you your me my I yes no goal on in at to by near between |.| |?| >>}) # fixed words
-->
   (<wd> ^parser-wvalue <wv>)
}

# excise this to enable parser learning mode
sp {preprocess-sentence*elaborate*no-learning
   (state <s> ^name preprocess-sentence
              ^sentence.word <wd>)
   (<wd> ^real-wvalue <rv>)
-->
   (<wd> ^parser-wvalue <rv>)
}

# issue a sentence-done command to remove obsolete original-sentence and
# parsed-sentences from input

# this is done here since at this time we are sure an alternate parse for the
# previous sentence shouldn't be selected

# message-predicate-sets are cleaned up as part of finish-interpretation
sp {preprocess-sentence*propose*cleanup
   (state <s> ^name preprocess-sentence
              ^io.input-link.lg.original-sentence.sentence-count <sc>
              ^top-state.language.message-predicate-set <mps>)
   (<mps> ^finished true
          ^sentence-count <sc>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name clean-old-input
        ^kind interpretation
        ^sentence-count <sc>)
}

sp {preprocess-sentence*apply*clean-old-input
   (state <s> ^name preprocess-sentence
              ^operator <o>
              ^io.output-link <ol>)
   (<o> ^name clean-old-input
        ^sentence-count <sc>)
-->
   (<ol> ^sentence-done <sd>)
   (<sd> ^sentence-count <sc>)
}
# proposal will unmatch since the effect of this will be removing the
# original-sentence (done in Java land)

sp {preprocess-sentence*elaborate*context-tag*which-question
   (state <s> ^name preprocess-sentence
              ^sentence.word <wd>)
   (<wd> ^real-wvalue context_which_question
        -^parser-wvalue | |)
-->
   (<s> ^operator <o> + >)
   (<o> ^name substitute
        ^word <wd>
        ^old-value context_which_question
        ^new-value | |)
}

sp {preprocess-sentence*apply*substitute*new
   (state <s> ^name preprocess-sentence
              ^operator <o>
              ^sentence.word <wd>)
   (<o> ^name substitute
        ^word <wd>
        ^new-value <new>)
-->
   (<wd> ^parser-wvalue <new>)
}

sp {preprocess-sentence*apply*substitute*old
   (state <s> ^name preprocess-sentence
              ^operator <o>
              ^sentence.word <wd>)
   (<wd> ^parser-wvalue <old>)
   (<o> ^name substitute
        ^word <wd>
        ^old-value <old>)
-->
   (<wd> ^parser-wvalue <old> -)
}

sp {preprocess-sentence*propose*output-preprocessed
   (state <s> ^name preprocess-sentence
              ^sentence <sent>)
-->
   (<s> ^operator <o> + <) # only after all preprocessing done
   (<o> ^name output-preprocessed)
}

sp {preprocess-sentence*apply*output-preprocessed*first-word
   (state <s> ^name preprocess-sentence
              ^operator.name output-preprocessed
              ^top-state.io.output-link <ol>
              ^sentence.sentence-count <ct>
              ^sentence.word <wd>)
   (<wd> ^wcount 0)
-->
   (<ol> ^preprocessed-sentence <ps>)
   (<ps> ^start <st>
         ^sentence-count <ct>)
   (<st> ^wcount 0)
   (<s> ^output-word <st>)
}

sp {preprocess-sentence*apply*output-preprocessed*next-word
   (state <s> ^name preprocess-sentence
              ^operator.name output-preprocessed
              ^sentence.word <next-word>
              ^output-word <last-word>)
   (<last-word> ^wcount <last-count>)
   (<next-word> ^wcount <next-count> > <last-count>)
  -{(<s> ^sentence.word <intervening-word>)
   (<intervening-word> ^wcount > <last-count>
                       ^wcount < <next-count>)}
-->
   (<last-word> ^next <xt>)
   (<xt> ^wcount <next-count>)
   (<s> ^output-word <xt>)
}

sp {preprocess-sentence*apply*output-preprocessed*word-value
   (state <s> ^name preprocess-sentence
              ^operator.name output-preprocessed
              ^sentence.word <wd>
              ^output-word <ow>)
   (<ow> ^wcount <wc>)
   (<wd> ^wcount <wc>
         ^parser-wvalue <val>)
-->
   (<ow> ^word <val>)
}

sp {preprocess-sentence*apply*output-preprocessed*last-word
   (state <s> ^name preprocess-sentence
              ^top-state <ts>
              ^operator.name output-preprocessed
              ^superstate.operator.original-sentence <os>
              ^sentence <sent>
              ^output-word <last-word>)
   (<last-word> ^wcount <last-count>)
  -{(<s> ^sentence.word.wcount > <last-count>)}
-->
   (<os> ^preprocessed true)
   (<ts> ^sentence-mapping <sent>)
}



# if there is an expectation that a word is being implicitly quoted, substitute
# it with a generic mass noun (word.n.3)
# this happens if the interaction stack indicates "I just told the mentor to
# define a word for me", that word should be quoted in the response
sp {preprocess-sentence*elaborate*implicit-quote
   (state <s> ^name preprocess-sentence
              ^top-state.interaction.stack.segment.purpose.parameters.message <q>)
   (<q> ^type category-of-word
        ^fields.word <wd>)
-->
   (<s> ^implicitly-quoted-word <wd>)
   (write (crlf) |"| <wd> |" will be implicitly quoted due to dialog context|)
}

# special word that is always implicitly quoted
sp {preprocess-sentence*iqw
   (state <s> ^name preprocess-sentence)
-->
   (<s> ^implicitly-quoted-word iqw)
}

sp {preprocess-sentence*propose*implicit-quote
   (state <s> ^name preprocess-sentence
              ^implicitly-quoted-word <wd>
              ^sentence.word <wrd>)
   (<wrd> ^wcount <wc>
          ^parser-wvalue <wd>)
-->
   (<s> ^operator <o> +)
   (<o> ^name substitute
        ^word <wrd>
        ^old-value <wd>
        ^new-value (concat |*noun| <wc>))
}

sp {preprocess-sentence*propose*lookup-word
   (state <s> ^name preprocess-sentence
              ^sentence.word <wd>)
   (<wd> ^real-wvalue <wv>
        -^parser-wvalue
         ^wcount <ct>)
-->
   (<s> ^operator <o> +)
   (<o> ^name lookup-word
        ^word <wv>
        ^position <ct>)
}

sp {preprocess-sentence*apply*lookup-word
   (state <s> ^name preprocess-sentence
              ^operator <o>
              ^smem.command <sc>)
   (<o> ^name lookup-word
        ^word <wd>)
-->
   (<sc> ^query <qr>)
   (<qr> ^word <wd>
         ^parse-class <class>)
}
   
sp {preprocess-sentence*apply*lookup-word*after-retrieval
   (state <s> ^name preprocess-sentence
              ^operator <o>
              ^smem <sm>
              ^sentence.word <wd>)
   (<o> ^name lookup-word
        ^position <ct>)
   (<sm> ^command <c>
         ^result.retrieved <ret>)
   (<ret> ^word <wval>
          ^parse-class <pc>)
   (<wd> ^wcount <ct>)
   (<c> ^query <qr>)
-->
   (<c> ^query <qr> -)
   (<wd> ^parser-wvalue (concat <pc> <ct>))
   (write (crlf) |Retrieved class | <pc> | for "| <wval> |"|)
}

sp {preprocess-sentence*apply*lookup-word*fail
   (state <s> ^name preprocess-sentence
              ^operator <o>
              ^smem <sm>
              ^learnable-word-type <lwt> # many matches due to this
              ^sentence.word <wd>)
   (<o> ^name lookup-word
        ^position <ct>)
   (<sm> ^command <c>
         ^result.failure)
   (<c> ^query <qr>)
   (<wd> ^wcount <ct>
         ^real-wvalue <wval>)
-->
   (<c> ^query <qr> -)
   (write (crlf) |Retrieval failed for "| <wval> |"|)
   # assume word is all possible types
   (<wd> ^parser-wvalue (concat <lwt> <ct>))
   (<wd> ^unlearned true)
}

sp {preprocess-sentence*prefer*earlier-lookup
   (state <s> ^name preprocess-sentence
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name lookup-word
         ^position <ct1>)
   (<o2> ^name lookup-word
         ^position > <ct1>)
-->
   (<s> ^operator <o1> > <o2>)
}

sp {elaborate*preprocessing*operators*are*interpretation*operators
   (state <s> ^name preprocess-sentence
              ^operator <o> +)
   (<o> ^name << lookup-word substitute output-preprocessed >>)
-->
   (<o> ^kind interpretation)
}

# smem --set learning on
# smem --add {
#   (<wd1> ^word red
#         ^parse-class *nounjective)
#   (<wd2> ^word square
#         ^parse-class *nounjective)
#   (<wd3> ^word get
#         ^parse-class *verb+with+direct+object)
#   (<wd4> ^word move
#         ^parse-class *verb+with+direct+object+and+preposition
#         ^parse-class *verb+with+direct+object
#         ^parse-class *verb+with+preposition)
# }

