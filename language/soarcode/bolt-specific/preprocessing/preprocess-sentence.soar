# examine the words before parsing, possibly swapping them out based on Soar
# knowledge.
# Soar knowledge to mess with the sentence before the parser sees it goes here.
# Learned words will be looked up in semantic memory here, and replaced with
# generics. Possibly all words.


# preprocessing flow:
# -sentence appears on io.input-link.lg.sentence
#  structure: sentence.words.word [wvalue wcount]
# -preprocessing goal takes over, builds io.output-link.preprocessed-sentence
#  structure: preprocessed-sentence.start [word next] [word next] ..

# copy the sentence to the state, deep copy so it can be modified

sp {preprocess-sentence*elaborate*sentence
  (state <s> ^name preprocess-sentence
             ^superstate.operator.original-sentence <sent>)
   (<sent> ^sentence-count <sc>)
-->
   (<s> ^sentence <copy>)
   (<copy> ^sentence-count <sc>)
}

sp {preprocess-sentence*elaborate*copy-word
   (state <s> ^name preprocess-sentence
              ^superstate.operator.original-sentence.words.word <wd>
              ^sentence <copy>)
   (<wd> ^wcount <wc>
         ^wvalue <wv>)
-->
   (<copy> ^word <copy-word>)
   (<copy-word> ^wcount <wc>
                ^real-wvalue <wv>
                ^parser-wvalue <wv>) # modify this to remap a word
}

sp {preprocess-sentence*elaborate*context-tag*which-question
   (state <s> ^name preprocess-sentence
              ^sentence.word <wd>)
   (<wd> ^real-wvalue context_which_question
         ^parser-wvalue context_which_question)
-->
   (<s> ^operator <o> +)
   (<o> ^name substitute
        ^word <wd>
        ^old-value context_which_question
        ^new-value | |)
}

sp {preprocess-sentence*apply*substitute
   (state <s> ^name preprocess-sentence
              ^operator <o>
              ^sentence.word <wd>)
   (<wd> ^parser-wvalue <old>)
   (<o> ^name substitute
        ^word <wd>
        ^old-value <old>
        ^new-value <new>)
-->
   (<wd> ^parser-wvalue <old> - <new>)
}

sp {preprocess-sentence*propose*output-preprocessed
   (state <s> ^name preprocess-sentence
              ^sentence <sent>)
-->
   (<s> ^operator <o> + <) # only after all preprocessing done
   (<o> ^name output-preprocessed
        ^kind interpretation)
}

sp {preprocess-sentence*apply*output-preprocessed*first-word
   (state <s> ^name preprocess-sentence
              ^operator.name output-preprocessed
              ^top-state.io.output-link <ol>
              ^sentence.sentence-count <ct>
              ^sentence.word <wd>)
   (<wd> ^wcount 0
         ^parser-wvalue <val>)
-->
   (<ol> ^preprocessed-sentence <ps>)
   (<ps> ^start <st>
         ^sentence-count <ct>)
   (<st> ^word <val>
         ^wcount 0)
   (<s> ^output-word <st>)
}

sp {preprocess-sentence*apply*output-preprocessed*next-word
   (state <s> ^name preprocess-sentence
              ^operator.name output-preprocessed
              ^sentence.word <next-word>
              ^output-word <last-word>)
   (<last-word> ^wcount <last-count>)
   (<next-word> ^wcount <next-count> > <last-count>
                ^parser-wvalue <val>)
  -{(<s> ^sentence.word <intervening-word>)
   (<intervening-word> ^wcount > <last-count>
                       ^wcount < <next-count>)}
-->
   (<last-word> ^next <xt>)
   (<xt> ^word <val>
         ^wcount <next-count>)
   (<s> ^output-word <xt>)
}

sp {preprocess-sentence*apply*output-preprocessed*last-word
   (state <s> ^name preprocess-sentence
              ^top-state <ts>
              ^operator.name output-preprocessed
              ^superstate.operator.original-sentence <os>
              ^sentence <sent>
              ^output-word <last-word>)
   (<last-word> ^wcount <last-count>)
  -{(<s> ^sentence.word.wcount > <last-count>)}
-->
   (<os> ^preprocessed true)
   (<ts> ^sentence-mapping <sent>)
}



# if there is an expectation that a word is being implicitly quoted, substitute
# it with a generic mass noun (word.n.3)
# this happens if the interaction stack indicates "I just told the mentor to
# define a word for me", that word should be quoted in the response
sp {preprocess-sentence*elaborate*implicit-quote
   (state <s> ^name preprocess-sentence
              ^top-state.interaction.stack.segment.purpose.parameters.message <q>)
   (<q> ^type category-of-word
        ^fields.word <wd>)
-->
   (<s> ^implicitly-quoted-word <wd>)
   (write (crlf) |"| <wd> |" will be implicitly quoted due to dialog context|)
}

sp {preprocess-sentence*propose*implicit-quote
   (state <s> ^name preprocess-sentence
              ^implicitly-quoted-word <wd>
              ^sentence.word.parser-wvalue <wd>)
-->
   (<s> ^operator <o> +)
   (<o> ^name implicit-quote
        ^kind interpretation)
}

# all generic types should be defined in the dictionary *type0 .. *typeN, where
# N is an upper bound on the sentence length we expect (30?)

# so to assign a generic to a word, we concat the generic type with the word
# index in the sentence, this allows the system to uniquely identify
# the-noun-that-was-in-position-2 without having to jump through a ton of hoops
# to keep a counter of nouns, verbs, etc. in the sentence

sp {preprocess-sentence*apply*implicit-quote
   (state <s> ^name preprocess-sentence
              ^operator.name implicit-quote
              ^implicitly-quoted-word <wd>
              ^sentence.word <wds>)
   (<wds> ^real-wvalue <wd>
          ^wcount <ct>
          ^parser-wvalue <wd>)
-->
   (<wds> ^parser-wvalue <wd> -
          ^parser-wvalue (concat |*noun| <ct>))
}

smem --add {
  (<wd1> ^word red
         ^parse-class nounjective)
  (<wd2> ^word square
         ^parse-class nounjective)
  (<wd3> ^word get
         ^parse-class verb-with-direct-object)
  (<wd4> ^word move
         ^parse-class verb-with-preposition-and-direct-object
         ^parse-class verb-with-direct-object
         ^parse-class verb-with-preposition
         ^parse-class verb)
}

