#### if the top-segment of the conversation stack contains a dialog event initiated by the instructor with purpose of action event prefer that action as compared to others


#### temp for new primitive-actions grab-missile and align-tank

sp {prefer*instructed*action*new
   (state <s> ^operator <op> +
   	      ^interaction.stack.segment <top>)
   (<top> ^initiator instructor
   	  ^purpose <p>)
   (<p> ^type external-action
   	^satisfaction <ps>)
   (<ps> ^action-event <info>)
   (<info> ^word <verb-name>
   	   ^arguments <args>)
   (<op> ^name <verb-name>)
-->
   (<s> ^operator <op> >)
   (<op> ^consider-purpose <p>)
}
 

sp {prefer*instructed*action*arg-values
   (state <s> ^operator <op> +
   	      ^interaction.stack.segment <top>)
   (<top> ^initiator instructor
   	  ^purpose <p>)
   (<p> ^type external-action
   	^satisfaction <ps>)
   (<ps> ^action-event <info>)
   (<info> ^verb <verb-name>
   	   ^arguments <args>)
   (<args> ^<arg-type> <arg-value>)
   (<op> ^actions <act>)
   (<act> ^<verb-name> <op-args>)
   (<op-args> ^<arg-type> <arg-value>)
-->
   (<op> ^match <arg-type>
   	 ^consider-purpose <p>)
}

sp {prefer*instructed*action*operator
   (state <s> ^operator <op> +)
   (<op> ^actions <act>)
   (<act> ^<verb> <op-args>)
   (<op-args> ^<arg-type> <arg-value>)
   (<op> -^match <arg-type>)
-->
   (<op> ^arg-match no)
}

sp {prefer*instructor*action
   (state <s> ^operator <op> +)
   (<op> ^actions <act>
   	 ^consider-purpose <p>)
   (<act> ^<verb-name> <op-args>)
   (<op> ^match <some>)
   (<op> -^arg-match no)
-->
   (<s> ^operator <op> >)
   (<op> ^executed-purpose <p>)
}

   

### if the instructed action is a completely new operator that the agent has never seen before, make a simple assumption that the instructor is trying to teach a new operator. Propose that operator with the highest preference

sp {propose*instructed*action
   (state <s> ^interaction.stack.segment <top>)
   (<top> ^initiator instructor
   	  ^purpose <p>)
   (<p> ^type external-action
   	^satisfaction <ps>)
   (<ps> ^action-event <info>)
   (<info> ^verb <verb-name> <> move <> turn <> radar <> grab-missile <> align-tank <> fire-missile)
-->
   (<s> ^operator <op> +)  
   (<op> ^name <verb-name>
   	 ^category new-external-action)
}
   
   
sp {elaborate*instructed*action
   (state <s> ^interaction.stack.segment <top>
   	      ^operator <op>)
   (<top> ^initiator instructor
   	  ^purpose <p>)
   (<p> ^type external-action
   	^satisfaction <ps>)
   (<ps> ^action-event <info>)
   (<info> ^verb <verb-name>
   	   ^arguments <args>)
   (<op> ^name <verb-name>)
   (<args> ^<arg-type> <arg-value>)
-->
   (<op> ^<arg-type> <arg-value>)
}



### if the top of the segment is a question from the instructor, propose an operator that replies to it
sp {propose*operator*answer*question
   (state <s> ^interaction.stack.segment <top>)
   (<top> ^initiator instructor
   	  ^purpose <p>)
   (<p> ^type question-fact
   	^satisfaction <ps>)
   (<ps> ^dialog-event-reply <info>)
-->
   (<s> ^operator <op> +)
   (<op> ^name reply-information
   	 ^attribute <info>)
}




