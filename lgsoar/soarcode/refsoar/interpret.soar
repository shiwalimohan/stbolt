# File: interpret.soar
# Author: William Taysom
# Version 2.0: July 24, 2001
# Created: July 7, 2001
#
# Desc: Provides semantic interpretation of lgtree syntax.
#
# Operators: give-root-ref (160), add-arg (150), transfer-for-remove-temp (140-130),
#
# Interpretations:
#		S as external, S-P as passive, S-I as inflected, O as internal, D as definite description,
#		D as indefinite description, MV-J as a preposition, AN as augmentation, E as mode,
#		I as inflection, I/N as negation, D as possessive
#
#
# 7 June 2011 DWL for soar9: added o-support, removed attr preferences
#

## give-root-ref

sp {interpret*propose*give-root-ref
   (state <s>  ^io.lgsentence <cs> ^count <count> ^root <root>)
   (<cs> ^count <count> ^words.word <root-word>)
   (<root-word> ^wcount <root> -^ref -^hidden ref ^wvalue <value>)
-->
   (<s> ^operator <o> +)
   (<o> ^name give-root-ref ^priority 160 ^root-word <root-word> ^sentence <cs>
        ^order <root-count> 
        ^debug-info (concat |adding a reference for root "| <value> |"|))
}

sp {interpret*apply*give-root-ref
 #   :o-support
   (state <s> ^operator <o> ^count <count> ^refsets.refs <refs>)
   (<refs> ^count <count>)
   (<o> ^name give-root-ref ^root-word <root-word>  ^sentence <cs>)
-->
   (<refs> ^ref <ref> +)
   (<root-word> ^ref <ref>)
   (<ref> ^head <root-word> ^rooted-in <cs>)
}

## add-arg
# proposals

sp	{interpret*propose*S*as*external
   (state <s> ^count <count> ^io.lgsentence <cs>)
   (<cs> ^count <count> ^links.link <link> ^words.word <ext> <main>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<ext> ^wcount <ext-count>)
   (<link> ^ltype S ^lwleft <ext-count> ^lwright <main-count> -^handled-as)
-->
   (<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug ext ^arg <ext> ^link <link>
   	 ^kind single ^order <ext-count> ^level-two-order <main-count>
   	 )}

sp {interpret*propose*O*as*internal
   (state <s> ^count <count> ^io.lgsentence <cs>)
   (<cs> ^count <count> ^links.link <link> ^words.word <int> <main>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<int> ^wcount <int-count>)
   (<link> ^ltype O ^lwleft <main-count> ^lwright <int-count> -^handled-as)
-->
   (<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug int ^arg <int> ^link <link>
   	 ^kind single ^order <main-count> ^level-two-order <int-count>
   	 )}

sp {interpret*propose*S-P*as*passive
   (state <s> ^count <count> ^io.lgsentence <cs>)
   (<cs> ^count <count> ^links.link <S-link> <P-link> ^words.word <int> <infl> <main>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<infl> ^wcount <infl-count>)
   (<int> ^wcount <int-count>)
   (<P-link> ^ltype P ^lwright <main-count> ^lwleft <infl-count>)
   (<S-link> ^ltype S ^lwright <infl-count> ^lwleft <int-count> -^handled-as)
-->
   (<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug int ^arg <int> ^link <S-link>
   	 ^kind single ^order <int-count> ^level-two-order <main-count> )}

sp {interpret*propose*S-I*as*inflected
   (state <s> ^count <count> ^io.lgsentence <cs>)
   (<cs> ^count <count> ^links.link <S-link> <I-link> ^words.word <ext> <infl> <main>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<infl> ^wcount <infl-count>)
   (<ext> ^wcount <ext-count>)
   (<I-link> ^ltype I ^lwright <main-count> ^lwleft <infl-count>)
   (<S-link> ^ltype S ^lwright <infl-count> ^lwleft <ext-count> -^handled-as)
-->
   (<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug ext ^arg <ext> ^link <S-link>
   	 ^kind single ^order <ext-count> ^level-two-order <main-count> )}
	
sp {interpret*propose*D*as*definite-description
   (state <s> 
   #^count <count> 
   ^io.lgsentence <cs>)
   (<cs> ^count <count> ^links.link <link> ^words.word <def-desc> <main>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<def-desc> ^wvalue << the this that >> ^wcount <def-desc-count>)
   (<link> ^ltype D ^lwleft <def-desc-count> ^lwright <main-count> 
   -^handled-as
   )
-->
   (<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug desc ^arg <desc> ^link <link>
   	 ^kind constant ^order <def-desc-count> ^level-two-order <main-count> )
   (<desc> ^word <def-desc> ^feature DEF)
 }

sp {interpret*propose*D*as*indefinite-description
   (state <s> 
   #^count <count> 
   ^io.lgsentence <cs>)
   (<cs> ^count <count> ^links.link <link> ^words.word <indef-desc> <main>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<indef-desc> ^wvalue << a an >> ^wcount <indef-desc-count>)
   (<link> ^ltype D ^lwleft <indef-desc-count> ^lwright <main-count> -^handled-as)
-->
   (<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug desc ^arg <desc> ^link <link>
   	 ^kind constant ^order <indef-desc-count> ^level-two-order <main-count> )
   (<desc> ^word <indef-desc> ^feature INDEF)}

sp {interpret*propose*D*as*possessive
   (state <s> ^count <count> ^io.lgsentence <cs>)
   (<cs> ^count <count> ^links.link <link> ^words.word <pos-pro> <main>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<pos-pro> ^wcount <pos-pro-count> ^wvalue << his her its my your >>)
   (<link> ^ltype D ^lwleft <pos-pro-count> ^lwright <main-count> -^handled-as)
-->
   (<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug pos ^arg <pos-pro> ^link <link>
   	 ^kind single ^order <pos-pro-count> ^level-two-order <main-count> )}

sp {interpret*propose*I*as*inflection
   (state <s> ^count <count> ^io.lgsentence <cs>)
   (<cs> ^count <count> ^links.link <link> ^words.word <infl> <main>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<infl> ^wcount <infl-count> ^wvalue <wvalue>)
   (<link> ^ltype I ^lwleft <infl-count> ^lwright <main-count> -^handled-as)
-->
   (<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug infl ^arg <wvalue> ^link <link>
   	 ^kind constant ^order <infl-count> ^level-two-order <main-count> )}

sp {interpret*propose*E*as*mode
   (state <s> ^count <count> ^io.lgsentence <cs>)
   (<cs> ^count <count> ^links.link <link> ^words.word <mode> <main>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<mode> ^wcount <mode-count> ^wvalue <wvalue>)
   (<link> ^ltype E ^lwleft <mode-count> ^lwright <main-count> -^handled-as)
-->
   (<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug mode ^arg <wvalue> ^link <link>
   	 ^kind constant ^order <mode-count> ^level-two-order <main-count> )}

sp {interpret*propose*I/N*as*negation
   (state <s> ^count <count> ^io.lgsentence <cs>)
   (<cs> ^count <count> ^links.link <I-link> <N-link> ^words.word <infl> <main> <neg>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<infl> ^wcount <infl-count>)
   (<neg> ^wcount <neg-count> ^wvalue not)
   (<I-link> ^ltype I ^lwleft <infl-count> ^lwright <main-count>)
   (<N-link> ^ltype N ^lwleft <infl-count> ^lwright <neg-count> -^handled-as)
-->
	(<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug neg ^arg not ^link <N-link>
   	 ^kind constant ^order <neg-count> ^level-two-order <main-count> )}

sp {interpret*propose*MV-J*as*preposition
   (state <s> ^count <count> ^io.lgsentence <cs>)
   (<cs> ^count <count> ^links.link <MV-link> <J-link> ^words.word <prep-obj> <prep> <main>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<prep> ^wvalue <aug> ^wcount <prep-count>)
   (<prep-obj> ^wcount <prep-obj-count>)
   (<MV-link> ^ltype << MV M P >> ^lwleft <main-count> ^lwright <prep-count> -^handled-as)
   (<J-link> ^ltype J ^lwleft <prep-count> ^lwright <prep-obj-count>)
-->
   (<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug <aug> ^arg <prep-obj> ^link <MV-link>
   	 ^kind single ^order <main-count> ^level-two-order <prep-count> )}
 

sp {interpret*propose*AN*as*noun-auging-noun
   (state <s> ^count <count> ^io.lgsentence <cs>)
   (<cs> ^count <count> ^links.link <link> ^words.word <main> <arg>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<arg> ^wcount <arg-count>)
   (<link> ^ltype AN ^lwleft <arg-count> ^lwright <main-count> -^handled-as)
-->
   (<s> ^operator <o> +)
   (<o> ^name add-arg ^priority 150 ^main <main> ^aug aug ^arg <arg> ^link <link>
   	 ^kind single-side ^order <main-count> ^level-two-order <arg-count> )}
   	 

# applications

sp {interpret*apply*single-add-arg*if*arg-is-constant
 # :o-support
   (state <s> ^operator <o> ^count <count> ^refsets.refs <refs>)
   (<o> ^name add-arg ^main <main> ^aug <aug> ^arg <cons-arg> ^link <link> ^kind constant
       )
   (<main> ^ref <main-ref>)
-->
   (<main-ref> ^<aug> <cons-arg> +)
   (<link> ^handled-as <aug> +)
   }
excise interpret*apply*single-add-arg*if*arg-is-constant
## soar9 problem: substructure under <cons-arg> loses o-support and disappears; adding it explicitly fixes the problem

    
sp {interpret*apply*single-add-arg*if*arg-is-constant*feature+word
  :o-support
   (state <s> ^operator <o> ^count <count> ^refsets.refs <refs>)
   (<o> ^name add-arg ^main <main> ^aug <aug> ^arg <cons-arg> ^link <link> ^kind constant 
       )
   (<main> ^ref <main-ref>)
   (<cons-arg> ^feature <fval> ^word <wval>)
-->
   (<main-ref> ^<aug> <dfoo> +)
   (<dfoo> ^feature <fval> + ^word <wval> +)
   (<link> ^handled-as <aug> +)
 }

sp {interpret*apply*single-add-arg*if*arg-is-constant*no-substructure
  :o-support
   (state <s> ^operator <o> ^count <count> ^refsets.refs <refs>)
   (<o> ^name add-arg ^main <main> ^aug <aug> ^arg <cons-arg> ^link <link> ^kind constant -^arg.feature)
   (<main> ^ref <main-ref>)
-->
   (<main-ref> ^<aug> <dfoo> +)
   (<dfoo> ^feature <fval> + ^word <wval> +)
   (<link> ^handled-as <aug> +)
 }
sp {interpret*apply*single-side-add-arg
 # :o-support
   (state <s> ^operator <o> ^count <count> ^refsets.refs <refs>)
   (<o> ^name add-arg ^main <main> ^aug <aug> ^arg <arg> ^link <link> ^kind single-side
   	 )
   (<refs> ^count <count>)
   (<main> ^ref <main-ref>)
   (<arg> -^ref)
-->
   (<main-ref> ^<aug> <arg-ref> +)
   (<refs> ^ref <arg-ref> +)
   (<arg-ref> ^head <arg> ^center nil)
   (<arg> ^ref <arg-ref>)
   (<link> ^handled-as <aug>)
}
sp {interpret*apply*single-add-arg*if*arg-requires-ref
 #  :o-support
   (state <s> ^operator <o> ^count <count> ^refsets.refs <refs>)
   (<o> ^name add-arg ^main <main> ^aug <aug> ^arg <arg> ^link <link> ^kind single
   	 )
   (<refs> ^count <count>)
   (<main> ^ref <main-ref>)
   (<arg> -^ref)
-->
   (<main-ref> ^<aug> <arg-ref> +)
   (<refs> ^ref <arg-ref> +)
   (<arg-ref> ^head <arg>)
   (<arg> ^ref <arg-ref>)
   (<link> ^handled-as <aug>)
}

sp {interpret*apply*single-add-arg*if*arg-has-ref
   (state <s> ^operator <o> ^refsets.refs <refs>)
   (<o> ^name add-arg ^main <main> ^aug <aug> ^arg-word <arg> ^link <link> ^kind single
       )
   (<refs> ^count <count>)
   (<main> ^ref <main-ref>)
   (<arg> ^ref <arg-ref>)
-->
   (<main-ref> ^<aug> <arg-ref> +)
   (<link> ^handled-as <aug>)
}
