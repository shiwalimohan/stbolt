# File: linkage.soar
# Author: William Taysom
# Created: Mar. 3, 2001
#
# Desc: Implements linkage operators. (protoDRS)
#
# Linkage Rules Implemented:
# S O D I N B C CO E EB YS YP TM TY MV OF MX M ON IN J JT P L G
#
# Special Linkage Rules:
# person-MG-of-JG-place
#
# TO DO:
# 

## Linkage Rules
# Linkage Proposal

sp	{Link*propose*linkage
	(state <s> ^analysis <a> ^io.lgsentence <cs> 
	^FOO BAR   ## DWL: turn this off for now since it learns 
	#^goal <goal> 
	#^count <count>
	)
	(<cs> ^count <count> ^links.link <link>)
	(<link> ^ltype { << S O D I N B C CO E EB YS YP TM TY MV OF MX M ON IN J
					JT P L G MG JG >> <ltype> }
			^lwright <lr> ^lwleft <ll>)
	(<a> -^link <link>)
#	(<goal> ^name generate-protoDRS)
-->
	(<s> ^operator <o> + <)
	(<o> ^name linkage ^ltype <ltype> ^lwright <lr> ^lwleft <ll> ^link <link>
		 )}


# S-linkage application productions

sp	{Link*apply*S*linkage
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype S ^lwright <lr> ^lwleft <ll> ^link <link>)
	(<a> ^build-dref <build-dref> ^build-verbal-cond <build-verbal-cond>)
	(<build-dref> ^wcount <ll> ^dref <subj>)
	(<build-verbal-cond> ^wcount <lr> ^verbal-cond <verbal-cond>)
-->
	(<verbal-cond> ^subj <subj> +)
	(<a> ^link <link> +)} 

sp	{Link*fail*apply*S*linkage*cause*left-needs*dref
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype S ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-dref <build-dref>)
  	(<build-dref> ^wcount <ll>)}
-->
	(<a> ^build-dref <new> +)
	(<new> ^wcount <ll>)
}

sp	{Link*fail*apply*S*linkage*cause*right-needs*verbal-cond
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype S ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-verbal-cond <build-verbal-cond>)
	(<build-verbal-cond> ^wcount <lr>)}
-->
	(<a> ^build-verbal-cond <new> +)
	(<new> ^wcount <lr>)
}

# O-linkage application productions

sp	{Link*apply*O*linkage
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype O ^lwright <lr> ^lwleft <ll> ^link <link>)
	(<a> ^build-dref <build-dref> ^build-verbal-cond <build-verbal-cond>)
	(<build-dref> ^wcount <lr> ^dref <obj>)
	(<build-verbal-cond> ^wcount <ll> ^verbal-cond <verbal-cond>)
-->
	(<verbal-cond> ^obj <obj> +)
	(<a> ^link <link> +)} 	

sp	{Link*fail*apply*O*linkage*cause*right-needs*dref
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype O ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-dref <build-dref>)
  	(<build-dref> ^wcount <lr>)}
-->
	(<a> ^build-dref <new> +)
	(<new> ^wcount <lr>)
}

sp	{Link*fail*apply*O*linkage*cause*left-needs*verbal-cond
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype O ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-verbal-cond <build-verbal-cond>)
	(<build-verbal-cond> ^wcount <ll>)}
-->
	(<a> ^build-verbal-cond <new> +)
	(<new> ^wcount <ll>)
}

# D-linkage application productions

sp	{Link*apply*D*linkage
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype D ^lwright <lr> ^lwleft <ll> ^link <link>)
	(<a> ^build-dref <build-dref> ^build-det-cond <build-det-cond>)
	(<build-dref> ^wcount <lr> ^dref <u>)
	(<build-det-cond> ^wcount <ll> ^det-cond <det-cond>)
-->
	(<det-cond> ^arg <u> +)
	(<a> ^link <link> +)} 	

sp	{Link*fail*apply*D*linkage*cause*left-needs*det-cond
 #  :o-support
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype D ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-det-cond <build-det-cond>)
	(<build-det-cond> ^wcount <ll>)}
-->
	(<a> ^build-det-cond <new> +)
	(<new> ^wcount <ll>)
}

sp	{Link*fail*apply*D*linkage*cause*right-needs*dref
 #  :o-support
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype D ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-dref <build-dref>)
  	(<build-dref> ^wcount <lr>)}
-->
	(<a> ^build-dref <new> +)
	(<new> ^wcount <lr>)
}

# I-linkage application productions

sp	{Link*apply*I*linkage
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype I ^lwright <lr> ^lwleft <ll> ^link <link>)
	(<a> ^build-verbal-cond <build-verbal-cond-main>
				{ <> <build-verbal-cond-main> <build-verbal-cond-aux> } )
	(<build-verbal-cond-aux> ^wcount <ll> ^verbal-cond <verbal-cond-aux>)
	(<build-verbal-cond-main> ^wcount <lr> ^verbal-cond <verbal-cond-main>)
-->
	(<verbal-cond-main> ^aux <verbal-cond-aux> +)
	(<a> ^link <link> +)} 

sp	{Link*fail*apply*I*linkage*cause*left-needs*verbal-cond
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype I ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-verbal-cond <build-verbal-cond>)
	(<build-verbal-cond> ^wcount <ll>)}
-->
	(<a> ^build-verbal-cond <new> +)
	(<new> ^wcount <ll>)
}

sp	{Link*fail*apply*I*linkage*cause*right-needs*verbal-cond
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype I ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-verbal-cond <build-verbal-cond>)
	(<build-verbal-cond> ^wcount <lr>)}
-->
	(<a> ^build-verbal-cond <new> +)
	(<new> ^wcount <lr>)
}

# N-linkage application productions

sp	{Link*apply*N*linkage
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype N ^lwright <lr> ^lwleft <ll> ^link <link>)
	(<a> ^build-verbal-cond <build-verbal-cond>)
	(<build-verbal-cond> ^wcount <ll> ^verbal-cond <verbal-cond>)
-->
	(<verbal-cond> ^neg not +)
	(<a> ^link <link> +)} 

sp	{Link*fail*apply*N*linkage*cause*left-needs*verbal-cond
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype N ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-verbal-cond <build-verbal-cond>)
	(<build-verbal-cond> ^wcount <ll>)}
-->
	(<a> ^build-verbal-cond <new> +)
	(<new> ^wcount <ll>)
}

# B-linkage application productions

sp	{Link*apply*B*linkage
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype B ^lwright <lr> ^lwleft <ll> ^link <link>)
	(<a> ^build-dref <build-dref> ^build-verbal-cond <build-verbal-cond>)
	(<build-dref> ^wcount <ll> ^dref <rel-obj>)
	(<build-verbal-cond> ^wcount <lr> ^verbal-cond <verbal-cond>)
-->
	(<verbal-cond> ^rel-obj <rel-obj> +)
	(<a> ^link <link> +)}

sp	{Link*fail*apply*B*linkage*cause*left-needs*dref
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype B ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-dref <build-dref>)
  	(<build-dref> ^wcount <ll>)}
-->
	(<a> ^build-dref <new> +)
	(<new> ^wcount <ll>)
}

sp	{Link*fail*apply*B*linkage*cause*right-needs*verbal-cond
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype B ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-verbal-cond <build-verbal-cond>)
	(<build-verbal-cond> ^wcount <lr>)}
-->
	(<a> ^build-verbal-cond <new> +)
	(<new> ^wcount <lr>)
}

# C-linkage application productions

sp	{Link*apply*C*linkage
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype C ^lwright <lr> ^lwleft <ll> ^link <link>)
	(<a> ^build-dref <build-dref> ^build-subconj-cond <build-subconj-cond>)
	(<build-dref> ^wcount <lr> ^dref <u>)
	(<build-subconj-cond> ^wcount <ll> ^subconj-cond <subconj-cond>)
-->
	(<subconj-cond> ^arg <u> +)
	(<a> ^link <link> +)} 	

sp	{Link*fail*apply*C*linkage*cause*left-needs*subconj-cond
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype C ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-det-subconj-cond <build-subconj-cond>)
	(<build-subconj-cond> ^wcount <ll>)}
-->
	(<a> ^build-subconj-cond <new> +)
	(<new> ^wcount <ll>)
}

sp	{Link*fail*apply*C*linkage*cause*right-needs*dref
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype C ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-dref <build-dref>)
  	(<build-dref> ^wcount <lr>)}
-->
	(<a> ^build-dref <new> +)
	(<new> ^wcount <lr>)
}

# CO-linkage application productions

sp	{Link*apply*CO*linkage
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype CO ^lwright <lr> ^lwleft <ll> ^link <link>)
	(<a> ^build-dref <build-dref> ^build-opening-cond <build-opening-cond>)
	(<build-dref> ^wcount <lr> ^dref <u>)
	(<build-opening-cond> ^wcount <ll> ^opening-cond <opening-cond>)
-->
	(<opening-cond> ^arg <u> +)
	(<a> ^link <link> +)} 	

sp	{Link*fail*apply*CO*linkage*cause*left-needs*opening-cond
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype CO ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-opening-cond <build-opening-cond>)
	(<build-opening-cond> ^wcount <ll>)}
-->
	(<a> ^build-opening-cond <new> +)
	(<new> ^wcount <ll>)
}

sp	{Link*fail*apply*CO*linkage*cause*right-needs*dref
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype CO ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-dref <build-dref>)
  	(<build-dref> ^wcount <lr>)}
-->
	(<a> ^build-dref <new> +)
	(<new> ^wcount <lr>)
}

# E-linkage application productions

sp	{Link*apply*E*linkage
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype E ^lwright <lr> ^lwleft <ll> ^link <link>)
	(<a> ^build-verbal-cond <build-verbal-cond>
		 ^build-adv-cond <build-adv-cond>)
	(<build-verbal-cond> ^wcount <lr> ^verbal-cond <verbal-cond>)
	(<build-adv-cond> ^wcount <ll> ^adv-cond <adv-cond>)
-->
	(<verbal-cond> ^adv <adv-cond> +)
	(<a> ^link <link> +)}

sp	{Link*fail*apply*E*linkage*cause*left-needs*adv-cond
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype E ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-adv-cond <build-adv-cond>)
	(<build-adv-cond> ^wcount <ll>)}
-->
	(<a> ^build-adv-cond <new> +)
	(<new> ^wcount <ll>)
}

sp	{Link*fail*apply*E*linkage*cause*right-needs*verbal-cond
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype E ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-verbal-cond <build-verbal-cond>)
	(<build-verbal-cond> ^wcount <lr>)}
-->
	(<a> ^build-verbal-cond <new> +)
	(<new> ^wcount <lr>)
}

# EB-linkage application productions

sp	{Link*apply*EB*linkage
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype EB ^lwright <lr> ^lwleft <ll> ^link <link>)
	(<a> ^build-verbal-cond <build-verbal-cond>
		 ^build-adv-cond <build-adv-cond>)
	(<build-verbal-cond> ^wcount <ll> ^verbal-cond <verbal-cond>)
	(<build-adv-cond> ^wcount <lr> ^adv-cond <adv-cond>)
-->
	(<verbal-cond> ^adv <adv-cond> +)
	(<a> ^link <link> +)}

sp	{Link*fail*apply*EB*linkage*cause*right-needs*adv-cond
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype EB ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-adv-cond <build-adv-cond>)
	(<build-adv-cond> ^wcount <lr>)}
-->
	(<a> ^build-adv-cond <new> +)
	(<new> ^wcount <lr>)
}

sp	{Link*fail*apply*EB*linkage*cause*left-needs*verbal-cond
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype EB ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-verbal-cond <build-verbal-cond>)
	(<build-verbal-cond> ^wcount <ll>)}
-->
	(<a> ^build-verbal-cond <new> +)
	(<new> ^wcount <ll>)
}

# YS and YP-linkage application productions

sp	{Link*apply*YS-YP*linkage
	(state <s> ^operator <o> ^analysis <a> ^protoDRS <d>)
	(<o> ^name linkage ^ltype << YS YP >> ^lwright <lr> ^lwleft <ll> ^link <link>)
	(<a> ^build-dref <build-dref>)
	(<build-dref> ^wcount <ll> ^dref <u>)
-->
	(<d> ^cond <cond> +)
	(<cond> ^arg <u> ^kind pos-s ^loc <lr> +)
	(<a> ^link <link> +)} 

sp	{Link*fail*apply*YS-YP*linkage*cause*left-needs*dref
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype << YS YP >> ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-dref <build-dref>)
  	(<build-dref> ^wcount <ll>)}
-->
	(<a> ^build-dref <new> +)
	(<new> ^wcount <ll>)
}

# TM-linkage application productions

sp	{Link*apply*TM*linkage*if-month-on-left
	(state <s> ^operator <o> ^analysis <a> ^protoDRS <d>)
	(<o> ^name linkage ^ltype TM ^lwright <lr> ^lwleft <ll> ^link <link>)
	(<a> ^build-dref <build-dref-ll> <build-dref-lr>)
	(<build-dref-ll> ^wcount <ll> ^dref <month>)
	(<month> ^word.wvalue << January February March April May June July
			August September November December >>)
	(<build-dref-lr> ^wcount <lr> ^dref <day>)
-->
	(<d> ^cond <cond> +)
	(<cond> ^kind time ^month <month> ^day <day>)
	(<a> ^link <link> +)}

sp	{Link*apply*TM*linkage*if-month-on-right
	(state <s> ^operator <o> ^analysis <a> ^protoDRS <d>)
	(<o> ^name linkage ^ltype TM ^lwright <lr> ^lwleft <ll> ^link <link>)
	(<a> ^build-dref <build-dref-ll> <build-dref-lr>)
	(<build-dref-lr> ^wcount <lr> ^dref <month>)
	(<month> ^word.wvalue << January February March April May June July
			August September November December >>)
	(<build-dref-ll> ^wcount <ll> ^dref <day>)
-->
	(<d> ^cond <cond> +)
	(<cond> ^kind time ^month <month> ^day <day> +)
	(<a> ^link <link> +)}

sp	{Link*fail*apply*TM*linkage*cause*left-needs*dref
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype TM ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-dref <build-dref>)
  	(<build-dref> ^wcount <ll>)}
-->
	(<a> ^build-dref <new> +)
	(<new> ^wcount <ll>)
}

sp	{Link*fail*apply*TM*linkage*cause*right-needs*dref
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype TM ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-dref <build-dref>)
  	(<build-dref> ^wcount <lr>)}
-->
	(<a> ^build-dref <new> +)
	(<new> ^wcount <lr>)
}

# TY-linkage application productions

sp	{Link*apply*TY*linkage*if-month-on-left
	(state <s> ^operator <o> ^analysis <a> ^protoDRS <d>)
	(<o> ^name linkage ^ltype TY ^lwright <lr> ^lwleft <ll> ^link <link>)
	(<a> ^build-dref <build-dref-ll> <build-dref-lr>)
	(<build-dref-ll> ^wcount <ll> ^dref <month>)
	(<month> ^word.wvalue << January February March April May June July
			August September November December >>)
	(<build-dref-lr> ^wcount <lr> ^dref <year>)
-->
	(<d> ^cond <cond> +)
	(<cond> ^kind time ^month <month> ^year <year>)
	(<a> ^link <link> +)}

sp	{Link*apply*TY*linkage*if-month-on-right
	(state <s> ^operator <o> ^analysis <a> ^protoDRS <d>)
	(<o> ^name linkage ^ltype TY ^lwright <lr> ^lwleft <ll> ^link <link>)
	(<a> ^build-dref <build-dref-ll> <build-dref-lr>)
	(<build-dref-lr> ^wcount <lr> ^dref <month>)
	(<month> ^word.wvalue << January February March April May June July
			August September November December >>)
	(<build-dref-ll> ^wcount <ll> ^dref <year>)
-->
	(<d> ^cond <cond> +)
	(<cond> ^kind time ^month <month> ^year <year> +)
	(<a> ^link <link> +)}

sp	{Link*fail*apply*TY*linkage*cause*left-needs*dref
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype TY ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-dref <build-dref>)
  	(<build-dref> ^wcount <ll>)}
-->
	(<a> ^build-dref <new> +)
	(<new> ^wcount <ll>)
}

sp	{Link*fail*apply*TY*linkage*cause*right-needs*dref
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype TY ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-dref <build-dref>)
  	(<build-dref> ^wcount <lr>)}
-->
	(<a> ^build-dref <new> +)
	(<new> ^wcount <lr>)
}

# MV and OF-linkage application productions

sp	{Link*apply*MV-OF*linkage
	(state <s> ^operator <o> ^analysis <a> ^io.lgsentence <cs>)
#			   ^count <count>)
	(<cs> ^words.word <modifier> ^count <count>)
	(<modifier> ^wcount <lr>)
	(<o> ^name linkage ^ltype << MV OF >> ^lwright <lr> ^lwleft <ll> ^link <link>)
	(<a> ^build-verbal-cond <build-verbal-cond>)
	(<build-verbal-cond> ^wcount <ll> ^verbal-cond <verbal-cond>)
-->
	(<verbal-cond> ^modifier <modifier> +)
	(<a> ^link <link> +)} 

sp	{Link*fail*apply*MV-OF*linkage*cause*left-needs*verbal-cond
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype << MV OF >> ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-verbal-cond <build-verbal-cond>)
	(<build-verbal-cond> ^wcount <ll>)}
-->
	(<a> ^build-verbal-cond <new> +)
	(<new> ^wcount <ll>)
}

# M and MX-linkage application productions

sp	{Link*apply*MX-M*linkage*modifier-has-other-links
	(state <s> ^operator <o> ^io.lgsentence <cs> ^analysis <a>)
#			   ^count <count>)
	(<cs> ^words.word <modifier> ^links.link { <other-link> <> <link> }
		  ^count <count>)
	(<other-link> ^<< lwright lwleft >> <lr>)
	(<modifier> ^wcount <lr>)
	(<o> ^name linkage ^ltype << MX M >> ^lwright <lr> ^lwleft <ll> ^link <link>)
	(<a> ^build-dref.nominal-cond <noun-cond>)
	(<noun-cond> ^kind nominal ^arg <u>)
	(<u> ^word.wcount <ll>)
-->
	(<noun-cond> ^modifier <modifier> +)
	(<a> ^link <link> +)}

sp	{Link*apply*MX-M*linkage*modifier-has-no-other-links
	(state <s> ^operator <o> ^io.lgsentence <cs> ^analysis <a>)
#			   ^count <count>)
	(<cs> ^words.word <modifier> ^count <count>)
  -{(<cs> ^links.link { <other-link> <> <link> })
	(<other-link> ^<< lwright lwleft >> <lr>)}
	(<modifier> ^wcount <lr>)
	(<o> ^name linkage ^ltype << MX M >> ^lwright <lr> ^lwleft <ll> ^link <link>)
	(<a> ^build-dref.nominal-cond <noun-cond> ^build-dref.dref <v>)
	(<v> ^word <modifier>)
	(<noun-cond> ^kind nominal ^arg <u>)
	(<u> ^word.wcount <ll>)
-->
	(<noun-cond> ^modifier <modifier> +)
	(<a> ^link <link> +)}

sp	{Link*fail*apply*MX-M*linkage*cause*left-needs*dref
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype << MX M >> ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-dref <build-dref>)
  	(<build-dref> ^wcount <ll>)}
-->
	(<a> ^build-dref <new> +)
	(<new> ^wcount <ll>)
}

sp	{Link*fail*apply*MX-M*linkage*modifier-has-no-other-links*cause*right-needs*dref
	(state <s> ^operator <o> ^analysis <a> ^io.lgsentence <cs>)
#			^count <count>)
	(<o> ^name linkage ^ltype << MX M >> ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
	(<cs> ^count <count>)
  -{(<cs> ^links.link { <other-link> <> <link> })
	(<other-link> ^<< lwright lwleft >> <lr>)}
  -{(<a> ^build-dref <build-dref>)
  	(<build-dref> ^wcount <lr>)}
-->
	(<a> ^build-dref <new> +)
	(<new> ^wcount <lr>)
}

# ON and IN-linkage application productions

sp	{Link*apply*ON-IN*linkage
	(state <s> ^operator <o> ^analysis <a> ^io.lgsentence <cs>)
#			   ^count <count>)
	(<cs> ^words.word <modifier> ^links.link <MV-link> ^count <count>)
	(<modifier> ^wcount <lr>)
	(<o> ^name linkage ^ltype << ON IN >> ^lwright <lr> ^lwleft <on>
		 ^link <link>)
	(<MV-link> ^lwright <on> ^lwleft <ll>)
	(<a> ^build-verbal-cond <build-verbal-cond>)
	(<build-verbal-cond> ^wcount <ll> ^verbal-cond <verbal-cond>)
-->
	(<verbal-cond> ^modifier <modifier> +)
	(<a> ^link <link> +)}

# J-linkage application productions

sp	{Link*apply*J*linkage
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype J ^lwright <lr> ^lwleft <ll> ^link <link>)
	(<a> ^build-dref <build-dref> ^build-prep-cond <build-prep-cond>)
	(<build-dref> ^wcount <lr> ^dref <obj>)
	(<build-prep-cond> ^wcount <ll> ^prep-cond <prep-cond>)
-->
	(<prep-cond> ^obj <obj> +)
	(<a> ^link <link> +)} 	

sp	{Link*fail*apply*J*linkage*cause*right-needs*dref
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype J ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-dref <build-dref>)
  	(<build-dref> ^wcount <lr>)}
-->
	(<a> ^build-dref <new> +)
	(<new> ^wcount <lr>)
}

sp	{Link*fail*apply*J*linkage*cause*left-needs*prep-cond
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype J ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-prep-cond <build-prep-cond>)
	(<build-prep-cond> ^wcount <ll>)}
-->
	(<a> ^build-prep-cond <new> +)
	(<new> ^wcount <ll>)
}

# JT-linkage application productions

sp	{Link*apply*JT*linkage
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype JT ^lwright <lr> ^lwleft <ll> ^link <link>)
	(<a> ^build-dref <build-dref> ^build-prep-cond <build-prep-cond>)
	(<build-dref> ^wcount <lr> ^dref <obj>)
	(<build-prep-cond> ^wcount <ll> ^prep-cond <prep-cond>)
-->
	(<prep-cond> ^obj <obj> + ^note time-expression)
	(<a> ^link <link> +)} 	

sp	{Link*fail*apply*JT*linkage*cause*right-needs*dref
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype JT ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-dref <build-dref>)
  	(<build-dref> ^wcount <lr>)}
-->
	(<a> ^build-dref <new> +)
	(<new> ^wcount <lr>)
}

sp	{Link*fail*apply*JT*linkage*cause*left-needs*prep-cond
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype JT ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-prep-cond <build-prep-cond>)
	(<build-prep-cond> ^wcount <ll>)}
-->
	(<a> ^build-prep-cond <new> +)
	(<new> ^wcount <ll>)
}

# P-linkage application productions

sp	{Link*apply*P*linkage
	(state <s> ^operator <o> ^analysis <a> ^io.lgsentence <cs>)
#			   ^count <count>)
	(<cs> ^words.word <be-compl> ^count <count>)
	(<be-compl> ^wcount <lr>)
	(<o> ^name linkage ^ltype P ^lwright <lr> ^lwleft <ll> ^link <link>)
	(<a> ^build-verbal-cond <build-verbal-cond>)
	(<build-verbal-cond> ^wcount <ll> ^verbal-cond <verbal-cond>)
-->
	(<verbal-cond> ^be-complement <be-compl> +)
	(<a> ^link <link> +)} 

sp	{Link*fail*apply*P*linkage*cause*left-needs*verbal-cond
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype P ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-verbal-cond <build-verbal-cond>)
	(<build-verbal-cond> ^wcount <ll>)}
-->
	(<a> ^build-verbal-cond <new> +)
	(<new> ^wcount <ll>)
}

# L-linkage application productions

sp	{Link*apply*L*linkage
	(state <s> ^operator <o> ^analysis <a> ^io.lgsentence <cs>)
#			   ^count <count>)
	(<cs> ^words.word <num-slat> ^count <count>)
	(<o> ^name linkage ^ltype L ^lwright <lr> ^lwleft <ll> ^link <link>)
	(<a> ^build-det-cond <build-det-cond>)
	(<build-det-cond> ^wcount <ll> ^det-cond <det-cond>)
	(<num-slat> ^wcount <lr>)
-->
	(<det-cond> ^number-superlative <num-slat> +)
	(<a> ^link <link> +)} 	

sp	{Link*fail*apply*L*linkage*cause*left-needs*det-cond
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype L ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-det-cond <build-det-cond>)
	(<build-det-cond> ^wcount <ll>)}
-->
	(<a> ^build-det-cond <new> +)
	(<new> ^wcount <ll>)
}

# G-linkage application productions

sp	{Link*apply*G*linkage*single-G-link
	(state <s> ^operator <o> ^analysis <a> ^io.lgsentence <cs>)
#			   ^count <count> 
	(<cs> ^links <links> ^count <count>)
  -{(<links> ^link <next-G-link-in-series>)
	(<next-G-link-in-series> ^ltype G ^lwleft <lr>)}
	(<o> ^name linkage ^ltype G ^lwright <lr> ^lwleft <ll> ^link <link>)
	(<a> ^build-dref <build-left-dref> <build-right-dref>)
	(<build-left-dref> ^wcount <ll> ^dref <u>)
	(<build-right-dref> ^wcount <lr> ^dref <v> ^nominal-cond <noun-cond>)
	(<noun-cond> ^kind nominal ^arg <v>)
  -{(<a> ^proper-noun <p>)
  	(<p> ^entry <u>)}
-->
	(<a> ^proper-noun <pn> +)
	(<noun-cond> ^proper-noun <pn>)
	(<pn> ^entry <u> +, <v> +)
	(<a> ^link <link> +)}

sp	{Link*apply*G*linkage*first-G-link-in-series
	(state <s> ^operator <o> ^analysis <a> ^io.lgsentence <cs>)
#			   ^count <count> 
	(<cs> ^links <links> ^count <count>)
	(<links> ^link <next-G-link-in-series>)
	(<next-G-link-in-series> ^ltype G ^lwleft <lr>)
	(<o> ^name linkage ^ltype G ^lwright <lr> ^lwleft <ll> ^link <link>)
	(<a> ^build-dref <build-left-dref> <build-right-dref>)
	(<build-left-dref> ^wcount <ll> ^dref <u>)
	(<build-right-dref> ^wcount <lr> ^dref <v>)
  -{(<a> ^proper-noun <p>)
  	(<p> ^entry <u>)}
-->
	(<a> ^proper-noun <pn> +)
	(<pn> ^entry <u> +, <v> +)
	(<a> ^link <link> +)}

sp	{Link*apply*G*linkage*intermediate-G-link-in-series
	(state <s> ^operator <o> ^analysis <a> ^io.lgsentence <cs>)
#			   ^count <count> 
	(<cs> ^links <links> ^count <count>)
	(<links> ^link <next-G-link-in-series>)
	(<next-G-link-in-series> ^ltype G ^lwleft <lr>)
	(<o> ^name linkage ^ltype G ^lwright <lr> ^lwleft <ll> ^link <link>)
	(<a> ^build-dref <build-left-dref> <build-right-dref>)
	(<build-left-dref> ^wcount <ll> ^dref <u>)
	(<build-right-dref> ^wcount <lr> ^dref <v> ^nominal-cond <noun-cond>)
	(<noun-cond> ^kind nominal ^arg <v>)
	(<a> ^proper-noun <p>)
	(<p> ^entry <u>)
-->
	(<p> ^entry <v> +)
	(<a> ^link <link> +)}

sp	{Link*apply*G*linkage*final-G-link-in-series
	(state <s> ^operator <o> ^analysis <a> ^io.lgsentence <cs>)
#			   ^count <count> 
	(<cs> ^links <links> ^count <count>)
  -{(<links> ^link <next-G-link-in-series>)
	(<next-G-link-in-series> ^ltype G ^lwleft <lr>)}
	(<o> ^name linkage ^ltype G ^lwright <lr> ^lwleft <ll> ^link <link>)
	(<a> ^build-dref <build-left-dref> <build-right-dref>)
	(<build-left-dref> ^wcount <ll> ^dref <u>)
	(<build-right-dref> ^wcount <lr> ^dref <v> ^nominal-cond <noun-cond>)
	(<noun-cond> ^kind nominal ^arg <v>)
	(<a> ^proper-noun <p>)
	(<p> ^entry <u>)
-->
	(<p> ^entry <v> +)
	(<noun-cond> ^proper-noun <p>)
	(<a> ^link <link> +)}

sp	{Link*fail*apply*G*linkage*cause*left-needs*dref
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype G ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-dref <build-dref>)
  	(<build-dref> ^wcount <ll>)}
-->
	(<a> ^build-dref <new> +)
	(<new> ^wcount <ll>)
}

sp	{Link*fail*apply*G*linkage*cause*right-needs*dref
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype G ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-dref <build-dref>)
  	(<build-dref> ^wcount <lr>)}
-->
	(<a> ^build-dref <new> +)
	(<new> ^wcount <lr>)
}


## Special Linkage Rules
# person-MG-of-JG-place application productions

sp	{Link*apply*person-MG-of-JG-place*special-linkage
	(state <s> ^operator <o> ^io.lgsentence <cs> ^analysis <a>)
#			   ^count <count>)
	(<cs> ^words.word <modifier> ^count <count>)
	(<cs> ^links.link { <other-link> <> <link> })
	(<other-link> ^lwleft <lr> ^ltype JG ^lwright <mod>)
	(<modifier> ^wcount <mod>)
	(<o> ^name linkage ^ltype MG ^lwright <lr> ^lwleft <ll> ^link <link>)
	(<a> ^build-dref.nominal-cond <noun-cond> ^build-dref.dref <v>)
	(<v> ^word <modifier>)
	(<noun-cond> ^kind nominal ^arg <u>)
	(<u> ^word.wcount <ll>)
-->
	(<noun-cond> ^modifier <modifier> +)
	(<a> ^link <link> +)
	(<a> ^link <other-link> +)}

sp	{Link*fail*apply*person-MG-of-JG-place*special-linkage*cause*left-needs*dref
	(state <s> ^operator <o> ^analysis <a>)
	(<o> ^name linkage ^ltype MG ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
  -{(<a> ^build-dref <build-dref>)
  	(<build-dref> ^wcount <ll>)}
-->
	(<a> ^build-dref <new> +)
	(<new> ^wcount <ll>)
}

sp	{Link*fail*apply*person-MG-of-JG-place*special-linkage*cause*mod-needs*dref
	(state <s> ^operator <o> ^analysis <a> ^io.lgsentence <cs>)
#			^count <count>)
	(<o> ^name linkage ^ltype MG ^lwright <lr> ^lwleft <ll> ^link <link>
		 )
	(<cs> ^count <count>)
	(<cs> ^links.link { <other-link> <> <link> })
	(<other-link> ^lwleft <lr> ^ltype JG ^lwright <mod>)
  -{(<a> ^build-dref <build-dref>)
  	(<build-dref> ^wcount <mod>)}
-->
	(<a> ^build-dref <new> +)
	(<new> ^wcount <mod>)
}

## operator tie resolutions
# prefer first linkage under lexical ordering

sp	{Link*prefer*first-linkage*under*lexical-ordering*if-rl-not-equal
	(state <s> ^attribute operator ^choices multiple ^impasse tie
			   ^superstate <ss>)
	(<s> ^item <1-link> { <> <1-link> <2-link> })
	(<1-link> ^name linkage ^lwright <1lr> ^lwleft <1ll>)
	(<2-link> ^name linkage ^lwright <2lr> > <1lr> ^lwleft <2ll>)
-->
	(<ss> ^operator <1-link> > <2-link>)}

sp	{Link*prefer*first-linkage*under*lexical-ordering*if-rl-equal
	(state <s> ^attribute operator ^choices multiple ^impasse tie
			   ^superstate <ss>)
	(<s> ^item <1-link> { <> <1-link> <2-link> })
	(<1-link> ^name linkage ^lwright <1lr> ^lwleft <1ll>)
	(<2-link> ^name linkage ^lwright <1lr> ^lwleft <2ll> > <1ll>)
-->
	(<ss> ^operator <1-link> > <2-link>)}
