# File: build.soar
# Author: William Taysom
# Created: Mar. 3, 2001
#
# Desc: Implements build operators. (protoDRS)
#
# Build Rules Implemented:
# 			build-dref, build-verbal-cond, build-det-cond,
#			build-subconj-cond, build-opening-cond, build-adv-cond,
#			build-prep-cond
#
# TO DO:
# 

## Build Rules
# build-dref

sp	{Link*propose*build-dref
   (state <s> ^analysis <a> ^io.lgsentence <cs> ^count <count>)
   (<a> ^build-dref <build-dref>)
   (<build-dref> ^wcount <pos> -^dref)
   (<cs> ^words.word <word> ^count <count>)
   (<word> ^wcount <pos>)
-->
   (<s> ^operator <o> +)
   (<o> ^name build-dref ^word <word> ^build-dref <build-dref> ^wcount <pos>
        ^complete? no)}

sp	{Link*apply*build-dref
   (state <s> ^operator <o> ^protoDRS <d>)
   (<o> ^name build-dref ^word <word> ^build-dref <build-dref> ^wcount <pos>
        ^complete? no)
   (<word> ^wvalue <value>)
-->
   (<build-dref> ^dref <u> ^nominal-cond <cond>)
   (<d> ^dref <u> + ^cond <cond> +)
   (<u> ^word <word>)
   (<cond> ^kind nominal ^pred <value> ^arg <u>)
}

# build-verbal-cond

sp	{Link*propose*build-verbal-cond
   (state <s> ^analysis <a> ^io.lgsentence <cs> ^count <count>)
   (<a> ^build-verbal-cond <build-verbal-cond>)
   (<build-verbal-cond> ^wcount <pos> -^verbal-cond)
   (<cs> ^words.word <verb> ^count <count>)
   (<verb> ^wcount <pos>)
-->
   (<s> ^operator <o> +)
   (<o> ^name build-verbal-cond ^verb <verb> ^wcount <pos>
        ^build-verbal-cond <build-verbal-cond> ^complete? no)}

sp	{Link*apply*build-verbal-cond
   (state <s> ^operator <o> ^protoDRS <d>)
   (<o> ^name build-verbal-cond ^verb <verb> ^wcount <pos>
        ^build-verbal-cond <build-verbal-cond> ^complete? no)
-->
   (<build-verbal-cond> ^verbal-cond <cond>)
   (<d> ^cond <cond> +)
   (<cond> ^kind verbal ^verb <verb>)
}

# build-det-cond

sp	{Link*propose*build-det-cond
   (state <s> ^analysis <a> ^io.lgsentence <cs>)
  #^count <count>)
   (<a> ^build-det-cond <build-det-cond>)
   (<build-det-cond> ^wcount <pos> -^det-cond)
   (<cs> ^words.word <det> ^count <count>)
   (<det> ^wcount <pos>)
-->
   (<s> ^operator <o> +)
   (<o> ^name build-det-cond ^det <det> ^wcount <pos>
        ^build-det-cond <build-det-cond> ^complete? no)}

sp	{Link*apply*build-det-cond
   (state <s> ^operator <o> ^protoDRS <d>)
   (<o> ^name build-det-cond ^det <det> ^wcount <pos>
        ^build-det-cond <build-det-cond> ^complete? no)
-->
   (<build-det-cond> ^det-cond <cond>)
   (<d> ^cond <cond> +)
   (<cond> ^kind det ^det <det>)
}

# build-subconj-cond

sp	{Link*propose*build-subconj-cond
   (state <s> ^analysis <a> ^io.lgsentence <cs> ^count <count>)
   (<a> ^build-subconj-cond <build-subconj-cond>)
   (<build-subconj-cond> ^wcount <pos> -^subconj-cond)
   (<cs> ^words.word <subconj> ^count <count>)
   (<subconj> ^wcount <pos>)
-->
   (<s> ^operator <o> +)
   (<o> ^name build-subconj-cond ^subconj <subconj> ^wcount <pos>
        ^build-subconj-cond <build-subconj-cond> ^complete? no)}

sp	{Link*apply*build-subconj-cond
   (state <s> ^operator <o> ^protoDRS <d>)
   (<o> ^name build-subconj-cond ^subconj <subconj> ^wcount <pos>
        ^build-subconj-cond <build-subconj-cond> ^complete? no)
-->
   (<build-subconj-cond> ^subconj-cond <cond>)
   (<d> ^cond <cond> +)
   (<cond> ^kind subconj ^subconj <subconj>)
}

# build-opening-cond

sp	{Link*propose*build-opening-cond
   (state <s> ^analysis <a> ^io.lgsentence <cs> ^count <count>)
   (<a> ^build-opening-cond <build-opening-cond>)
   (<build-opening-cond> ^wcount <pos> -^opening-cond)
   (<cs> ^words.word <opening> ^count <count>)
   (<opening> ^wcount <pos>)
-->
   (<s> ^operator <o> +)
   (<o> ^name build-opening-cond ^opening <opening> ^wcount <pos>
        ^build-opening-cond <build-opening-cond> ^complete? no)}

sp	{Link*apply*build-opening-cond
   (state <s> ^operator <o> ^protoDRS <d>)
   (<o> ^name build-opening-cond ^opening <opening> ^wcount <pos>
        ^build-opening-cond <build-opening-cond> ^complete? no)
-->
   (<build-opening-cond> ^opening-cond <cond>)
   (<d> ^cond <cond> + )
   (<cond> ^kind opening ^opening <opening>)
}

# build-adv-cond

sp	{Link*propose*build-adv-cond
   (state <s> ^analysis <a> ^io.lgsentence <cs> ^count <count>)
   (<a> ^build-adv-cond <build-adv-cond>)
   (<build-adv-cond> ^wcount <pos> -^adv-cond)
   (<cs> ^words.word <adv> ^count <count>)
   (<adv> ^wcount <pos>)
-->
   (<s> ^operator <o> +)
   (<o> ^name build-adv-cond ^adv <adv> ^wcount <pos>
        ^build-adv-cond <build-adv-cond> ^complete? no)}

sp	{Link*apply*build-adv-cond
   (state <s> ^operator <o> ^protoDRS <d>)
   (<o> ^name build-adv-cond ^adv <adv> ^wcount <pos>
        ^build-adv-cond <build-adv-cond> ^complete? no)
-->
   (<build-adv-cond> ^adv-cond <cond>)
   (<d> ^cond <cond> + )
   (<cond> ^kind adv ^adv <adv>)
}

# build-prep-cond

sp	{Link*propose*build-prep-cond
   (state <s> ^analysis <a> ^io.lgsentence <cs> ^count <count>)
   (<a> ^build-prep-cond <build-prep-cond>)
   (<build-prep-cond> ^wcount <pos> -^prep-cond)
   (<cs> ^words.word <prep> ^count <count>)
   (<prep> ^wcount <pos>)
-->
   (<s> ^operator <o> +)
   (<o> ^name build-prep-cond ^prep <prep> ^wcount <pos>
        ^build-prep-cond <build-prep-cond> ^complete? no)}

sp	{Link*apply*build-prep-cond
   (state <s> ^operator <o> ^protoDRS <d>)
   (<o> ^name build-prep-cond ^prep <prep> ^wcount <pos>
        ^build-prep-cond <build-prep-cond> ^complete? no)
-->
   (<build-prep-cond> ^prep-cond <cond>)
   (<d> ^cond <cond> +)
   (<cond> ^kind prep ^prep <prep>)
}

## operator tie resolutions
# prefer build left over build right

sp	{Link*prefer*build-left*over*build-right
   (state <s> ^attribute operator ^choices multiple ^impasse tie
              ^superstate <ss>)
   (<s> ^item <left> { <> <left> <right> })
   (<left> ^wcount <left-pos>)
   (<right> ^wcount <right-pos> > <left-pos>)
-->
   (<ss> ^operator <left> > <right>)}
