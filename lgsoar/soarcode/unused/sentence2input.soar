# runs standalone---sentence input via raw text file called sentence.txt
# set up top-state variables, and initialize the stack


sp {elaborate*set-feats
   (state <s> ^superstate nil ^type state ^io.input-link <ii>)
-->
   # on the input link record and count incoming words from the sentence
   (<ii> ^auditory-input <words> +)
   (<words> ^incount 0 +)
   # count words and record when they are attended to
   (<s> ^wcnt 1 + ^lastacc 0)
   # store the input sentence and the filename for the graphviz dumps
   (<s> ^runtimeinfo <rin> +)
   (<rin> ^lginput (exec readsentence))
   (<rin> ^pidno (exec getpid) +)
   (<rin> ^tempfile (exec gettempfile) +)
   
   ## attributes for old code not yet updated
   (<s> ^analysis <ana> + ^proto-DRS <pdrs> +)
   
   ## initialize the predicate output string
   (exec predinit)
   
   ## trigger a refresh of the output
   (<s> ^predoutput-refresh yes +)
}

sp {elaborate*set-feats*call-lgparser
   (state <s> ^superstate nil ^type state ^io <io>)
   # count words and record when they are attended to
   (<s> ^wcnt 1  ^lastacc 0)
   # store the input sentence and the filename for the graphviz dumps
   (<s> ^runtimeinfo <rin>)
   (<rin> ^lginput <lgin>)
-->
   (<io> ^lgsentence <lgwme> +)
   ## call the lg parser
   (<s> ^lgparse <lgparse> +)
   (write (crlf) calling-lgparse | | <lgwme> | | <lgin>)
   (<lgparse> ^result (exec getlgparse <lgwme> | | <lgin>) +)
}

sp {elaborate*clear-output
  :o-support
   (state <s> ^superstate nil ^type state ^io <io> ^predoutput-refresh yes)
   (<io> ^output-preds <ops>)
-->
   (<io> ^output-preds <ops> -)
   (<s> ^predoutput-refresh yes -)
}

############### input all words from the sentence onto the input link
############### vis sentence2inputlink operator
sp {propose*sentence2inputlink*x
   (state <s> ^superstate nil ^type state -^operator.name sentence2inputlink +)
   (<s> ^io.input-link <ii>)
   (<ii> ^auditory-input <iiw>)
   (<iiw> ^incount <wcnt> )
   (<s> -^sentence.word-id.word-name |.|)
-->
   (<s> ^operator <o> +)
   (<o> ^name sentence2inputlink ^wcnt (+ 1 <wcnt>))
   (write (crlf) Proposed | | operator | | <o>)
}

sp {apply*sentence2inputlink*x
        (state <s> ^superstate nil ^type state ^operator <o> ^io.input-link.auditory-input <iiw>)
        (<o> ^name sentence2inputlink ^wcnt <wcx>)
        (<iiw> -^annotation eos-found -^attended-auditory-input.wcnt <wcx> ^incount <wxy>)
-->
        (<iiw> ^attended-auditory-input <fnew> +)
        (<fnew> ^lex (exec popword) ^wcnt <wcx> +)
}

sp {apply*sentence2inputlink*x*create-sentence-attribute
        (state <s> ^superstate nil ^type state ^operator <o> ^io.input-link.auditory-input <iiw>)
        (<o> ^name sentence2inputlink ^wcnt <wcx>)
        (<iiw>  -^annotation eos-found ^attended-auditory-input <aai> ^incount <wxy>)
        (<aai> ^wcnt <wcx> ^lex <lxval>)
-->
    (<s> ^sentence <word> +)
    (<word> ^word-id <aai> +)
    (<aai> ^word-name <lxval> +)
    (<word> ^wnetdata <wndata> +)
    (<iiw> ^incount <wxy> - (+ 1 <wxy>) +)
    (<aai> ^attribute-created yes +)
}

sp {annotate*sentence2inputlink*flag-eos
   :o-support
   (state <s> ^superstate nil ^type state ^io.input-link.auditory-input <iiw>)
   (<iiw> ^attended-auditory-input <aai> ^incount <infoo> -^annotation eos-found)
   (<aai> ^lex { <lx> |.| } ^attribute-created yes )
-->
   (write (crlf) Exhausted | | input)
   (<iiw> ^annotation eos-found +)
}
