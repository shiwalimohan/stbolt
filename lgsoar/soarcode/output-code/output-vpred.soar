
###################### these output terms for verbal external and internal arguments
# output the external and internal argument (if it exists) for the verb
sp {global*apply*processing-complete*output*ext/int*arg
   (state <s> ^superstate nil ^model.idea <idea> ^final-predicates <fp>)
   (state <s> ^operator.name processing-complete 
   #^count <count> 
   ^refsets.refs.count <count>)
   (<idea> ^<< ext int >> <thisroleval> ^nuc <nucval> ^annotation pred-adj/noun-tested)
   (<thisroleval> ^nuc <thisnucval> -^annotation pred-adj/noun
   #^annotation pred-prep 
   -^annotation in-n-n)
-->
   (<thisroleval> ^annotation pred-dumped +)
   #(exec collect_pred <thisnucval> |(| <thisroleval> |)|)
   (<fp> ^predicate (concat <thisnucval> |(| <thisroleval> |)|))
#   (write (crlf) ext/int-arg: <thisnucval> |(| <thisroleval> |)|)
}

# now output the term for the predicate adjective; NOTE: have to find the subject's variable
sp {global*apply*processing-complete*output*int*pred-adj
   (state <s> ^superstate nil ^model.idea <idea> ^final-predicates <fp>)
   (state <s> ^operator.name processing-complete 
   #^count <count> 
   ^refsets.refs.count <count>)
   (<idea> ^int <thisroleval> ^nuc <nucval>)
   (<thisroleval> ^nuc <thisnucval> ^annotation pred-adj/noun ^aug.ext <thesubject> -^annotation pred-pp
   #^annotation pred-prep 
   -^annotation in-n-n)
-->
   (<thisroleval> ^annotation pred-dumped +)
   (<idea> ^annotation pred-dumped +) # a white lie 
   #(exec collect_pred <thisnucval> |(| <thesubject> |)|)
   (<fp> ^predicate (concat <thisnucval> |(| <thesubject> |)|))
#   (write (crlf) int*pred-adj: <thisnucval> |(| <thesubject> |)|)
}

# intransitive predicate terms
sp {global*apply*processing-complete*output*predicate-itrx
   (state <s> ^superstate nil ^model.idea <idea> ^final-predicates <fp>)
   (state <s> ^operator.name processing-complete 
   #^count <count> 
   ^refsets.refs.count <count>)
   (<idea> ^ext <extval> ^nuc <nucval> -^int <any> -^annotation copula)
   (<extval> ^nuc <extnucval> ^annotation pred-dumped)
-->
   (<idea> ^annotation pred-dumped + ^annotation intransitive +)
   (<fp> ^predicate (concat <nucval> |(| <extval> |)|))
   #(exec collect_pred <nucval> |(| <extval> |)|)
#   (write (crlf) predicate-itrx: | | <nucval> |(| <extval> |)|)
}


# transitive predicate terms
sp {global*apply*processing-complete*output*predicate-trx
   (state <s> ^superstate nil ^model.idea <idea> ^final-predicates <fp>)
   (state <s> ^operator.name processing-complete 
   #^count <count> 
   ^refsets.refs.count <count>)
   (<idea> ^ext <extval> ^nuc <nucval> ^int <intval> -^int {<> <intval> <int2val>} -^annotation copula)
   (<extval> ^nuc <extnucval> ^annotation pred-dumped)
-->
   (<extval> ^annotation pred-dumped +)
   (<intval> ^annotation pred-dumped +)
   (<idea> ^annotation pred-dumped + ^annotation transitive +)
   (<fp> ^predicate (concat <nucval> |(| <extval> |,| <intval> |)|))
   #(exec collect_pred <nucval> |(| <extval> |,| <intval> |)|)
#   (write (crlf) predicate-trx: | | <nucval> |(| <extval> |,| <intval> |)|)
}

# the man sent the lawyer a letter .

# ditransitive predicates
sp {global*apply*processing-complete*output*predicate-ditrx
   (state <s> ^superstate nil ^model.idea <idea> ^final-predicates <fp>)
   (state <s> ^operator.name processing-complete 
   #^count <count> 
   ^refsets.refs.count <count>)
   (<idea> ^ext <extval> ^nuc <nucval> ^int <intval> ^int {<> <intval> <int2val>})
   (<extval> ^nuc <extnucval> ^annotation pred-dumped)
   (<intval> ^wcount <w1val>)
   (<int2val> ^wcount {< <w1val> <w2val>})
-->
   (<extval> ^annotation pred-dumped +)
   (<intval> ^annotation pred-dumped +)
   (<int2val> ^annotation pred-dumped +)
   (<idea> ^annotation pred-dumped +)
   (<fp> ^predicate (concat <nucval> |(| <extval> |,| <intval> |,| <int2val> |)|))
   #(exec collect_pred <nucval> |(| <extval> |,| <intval> |,| <int2val> |)|)
#   (write (crlf) predicate-ditrx: | | <nucval> |(| <extval> |,| <intval> |,| <int2val> |)|)
}

