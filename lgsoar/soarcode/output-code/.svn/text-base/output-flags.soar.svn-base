### set some flags that we'll need for later testing

################################## copula flag ###################################

sp {global*apply*processing-complete*output*set-flag*copula
  :o-support
   (state <s> ^superstate nil ^model.idea <idea>)
   (state <s> ^operator <o>)
   (<o> ^name processing-complete)
   (state <s>  
   #^count <count> 
   ^refsets.refs.count <count>)
   (<idea> ^nuc {<< was were am are is be >> <nucval>})
-->
  (<idea> ^annotation copula +)
  (<o> ^annotation copulaflag-set +)
}
sp {global*apply*processing-complete*output*set-flag*copula*fail
  :o-support
   (state <s> ^superstate nil ^model.idea <idea>)
   (state <s> ^operator <o>)
   (<o> ^name processing-complete)
   (state <s>  
   #^count <count> 
   ^refsets.refs.count <count>)
   (<idea> -^nuc {<< was were am are is be >> <nucval>})
-->
  (<o> ^annotation copulaflag-set +)
}


#################################### preposition flags #########################

### use just 1 flag for all preps, based on the lex item
sp {global*apply*processing-complete*output*flag-preplex
  :o-support
   (state <s> ^superstate nil ^model.idea <idea> ^refsets.refs.count <count>) #^count <count>
   (state <s> ^operator <o>)
   (<o> ^name processing-complete ^annotation copulaflag-set)
   (<idea> ^{<< about above across after against along among around as at 
		before behind below beneath beside between beyond but by
		concerning despite down during except excepting for from
		in inside into like near next of off on onto out outside
		over past regarding round since through throughout till to 
		toward under underneath unlike until up upon with within
		without >> <ptype>} <pval>)
-->
  (<idea> ^preplex <ptype> +)
  (<o> ^annotation prepflags-set +)
}

### copula+pred-pp have different structure
sp {global*apply*processing-complete*output*flag-preplex*copula
  :o-support
   (state <s> ^superstate nil ^model.idea <idea> ^refsets.refs.count <count>) #^count <count> 
   (state <s> ^operator <o>)
   (<o> ^name processing-complete ^annotation copulaflag-set)
   (<idea> ^preplex <some> ^annotation copula)
-->
  (<idea> ^annotation pred-pp +)
  (<o> ^annotation prepflags-set +)
}

### otherwise
sp {global*apply*processing-complete*output*flag-preplex*fail
  :o-support
   (state <s> ^superstate nil ^model.idea <idea> ^refsets.refs.count <count>) #^count <count> 
   (state <s> ^operator <o>)
   (<o> ^name processing-complete ^annotation copulaflag-set)
   
 -{
    (<idea> ^{<< about above across after against along among around as at 
		before behind below beneath beside between beyond but by
		concerning despite down during except excepting for from
		in inside into like near next of off on onto out outside
		over past regarding round since through throughout till to 
		toward under underneath unlike until up upon with within
		without >> <ptype>} <pval>)
		
	}
 -{
   (<idea> ^nuc { << about above across after against along among around as at 
		before behind below beneath beside between beyond but by
		concerning despite down during except excepting for from
		in inside into like near next of off on onto out outside
		over past regarding round since through throughout till to 
		toward under underneath unlike until up upon with within
		without >> <ptype>} ^aug.annotation copula)
	}
	
	
-->
  (<o> ^annotation prepflags-set +)
}

#################################### adjective/noun flags #########################

### set an annotation to flag predicate adjectives and nouns

# test to see whether the internal argument is a predicate adjective
# set a flag on the idea (so we can assure the pred-adj/noun test has been done)
# and set a flag on the internal argument if it is a pred-adj/noun
sp {global*apply*processing-complete*output*set-flag*pred-adj/noun
  :o-support
   (state <s> ^superstate nil ^model.idea <idea>)
   (state <s> ^operator <o>)
   (<o> ^name processing-complete ^annotation prepflags-set)
   (state <s>  
   #^count <count> 
   ^refsets.refs.count <count>)
   (<idea> ^int <thisroleval> ^nuc {<< was were am are is be >> <nucval>})
   (<thisroleval> ^nuc <thisnucval> 
   -^annotation pred-pp
   -^annotation in-n-n)
-->
  (<idea> ^annotation pred-adj/noun-tested + ^annotation copula +)
  (<thisroleval> ^annotation pred-adj/noun +)
  (<o> ^annotation predflags-set +)
}
sp {global*apply*processing-complete*output*set-flag*pred-adj/noun*fail
  :o-support
   (state <s> ^superstate nil ^model.idea <idea>)
   (state <s> ^operator <o>)
   (<o> ^name processing-complete ^annotation prepflags-set) 
   (state <s> 
   #^count <count> 
   ^refsets.refs.count <count>)
   (<idea> ^int <thisroleval> ^nuc {<> was <> were <> am <> are <> is <> be <nucval>})
   (<thisroleval> ^nuc <thisnucval> 
   -^annotation in-n-n)
-->
  (<idea> ^annotation pred-adj/noun-tested +)
  (<o> ^annotation predflags-set +)
}
# put out a white lie for itrx verbs
sp {global*apply*processing-complete*output*set-flag*pred-adj/noun*fail*intrx
  :o-support
   (state <s> ^superstate nil ^model.idea <idea>)
   (state <s> ^operator <o>)
   (<o> ^name processing-complete ^annotation prepflags-set) 
   (state <s>
   #^count <count> 
   ^refsets.refs.count <count>)
   (<idea> ^ext <anyext> -^int <thisroleval> ^nuc <nucval>)
-->
  (<idea> ^annotation pred-adj/noun-tested +)
  (<o> ^annotation predflags-set +)
}
