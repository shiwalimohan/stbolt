

### output predicate for predicate PP
# the block is on the table .
sp {global*apply*processing-complete*output*predicate-PP
   (state <s> ^superstate nil ^model.idea <idea>
              ^final-predicates <fp>)
   (state <s> ^operator.name processing-complete 
   #^count <count> 
   ^refsets.refs.count <count>)
   (<idea> ^ext <extval> ^annotation copula ^annotation pred-pp ^preplex <plex> ^<plex> <plexval>)
   (<extval> ^nuc <extnucval> ^annotation pred-dumped)
   (<plexval> ^nuc <pobjlex>) 
-->
   (<plexval> ^annotation pred-dumped +)
   (<idea> ^annotation pred-dumped +) # a white lie
  (<fp> ^predicate (concat <plex> |(| <extval> |,| <plexval> |)|))
   #(exec collect_pred <plex> |(| <extval> |,| <plexval> |)|)
#   (write (crlf) predicate-pp: | | <plex> |(| <extval> |,| <plexval> |)|)
}


### output predicate for PP on external arg
# the man with teeth barfed .
# the big man with teeth barfed .
### copula predicate has PP
# one criterion is history of lymphoma
sp {global*apply*processing-complete*output*nuc+ppobj*predicate
    (state <s> ^superstate nil ^operator <o> ^final-predicates <fp> 
    #^count <count> 
    ^model <m*1>
          ^refsets <refsets>)
    (<o> ^name processing-complete)
    (<m*1> ^idea <idea>)
    (<idea> -^relclause <relval> 
    #-^aug <augval> DWL: it's an ext so the predicate is an ^aug
    -^int <intval> -^ext <extval>
          ^nuc <nucval>
	  ^preplex <plex> ^<plex> <pobjval> -^annotation pred-pp)
    (<refsets> ^refs <refs>)
    (<refs> ^count <count>)
    (<pobjval> ^nuc <nuc2val> ^aug <aug2val>)
    -->
    (<pobjval> ^annotation pred-dumped +)
    (<fp> ^predicate (concat <plex> |(| <idea> |,| <pobjval> |)|))
    #(exec collect_pred <plex> |(| <idea> |,| <pobjval> |)|)
#    (write (crlf) nuc-ppobj*seq: <plex> |(| <idea> |,| <pobjval> |)|)
}


### can't output predicate for PP on internal arg because LG parser always attaches PP to verb
### police chased the man with a limp
### in any case, handle PP attachments to verb; for now just use verb lex as first argument
### this should handle intransitives, transitives, and ditransitives
sp {global*apply*processing-complete*output*PP*v-attached
    (state <s> ^superstate nil ^operator <o> ^final-predicates <fp>
    #^count <count> 
    ^model <m*1>
          ^refsets <refsets>)
    (<o> ^name processing-complete)
    (<m*1> ^idea <idea>)
    (<idea> ^nuc <nucval> ^preplex <plex> ^<plex> <pobjval> -^annotation copula -^annotation pred-pp)
	# somewhat of a hack---without this we get with(x1,x2) and with(verb,X2) for some reason
    (<idea> -^aug.annotation copula)
    (<refsets> ^refs <refs>)
    (<refs> ^count <count>)
    (<pobjval> ^nuc <nuc2val> ^aug <aug2val>)
    -->
    (<pobjval> ^annotation pred-dumped +)
    (<fp> ^predicate (concat <plex> |(| <nucval> |,| <pobjval> |)|))
    #(exec collect_pred <plex> |(| <nucval> |,| <pobjval> |)|)
    #(write (crlf) nuc-ppobj*seq: <plex> |(| <nucval> |,| <pobjval> |)|)
}

### output a predicate for the object of any pp
# the happy dogs with a penchant for ridiculous drama chased the ugly cat .
sp {global*apply*processing-complete*cligdump*ppobj*arg
   (state <s> ^superstate nil ^model.idea <idea> ^final-predicates <fp>)
   (state <s> ^operator.name processing-complete 
   #^count <count> 
   ^refsets.refs.count <count>)
   (<idea> ^nuc <nucval> ^preplex <plex> ^<plex> <pobjval>)
   (<pobjval> ^nuc <nuc2val> ^aug <aug2val>)
-->
   (<pobjval> ^annotation pred-dumped +)
   #(<nuc2val> ^annotation pred-dumped +)
   (<fp> ^predicate (concat <nuc2val> |(| <pobjval> |)|))
   #(exec collect_pred <nuc2val> |(| <pobjval> |)|)
#   (write (crlf) ext/int-arg: <nuc2val> |(| <pobjval> |)|)
}



