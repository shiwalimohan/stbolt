# This runs after the parser, before LGSoar.
# 
# - If the parse fails, try reparsing as a noun phrase
# - If there are multiple parses, allow Soar knowledge to select a non-default
# parse. Specifically:
# "Pick up the square to the right of the triangle"
# This parses by attaching the preposition to the verb, not the object.
# Need to detect the verb ("pick up"), get knowledge that it has no PP. Then,
# select best parse that doesn't give it one.
#
# "Describe the relationship between the arch and the triangle."
# Similarly, the "between" attaches to "describe" wrongly in the first parse.

# elaborations to help parse matching
# NOT attached to this subgoal, but used here
sp {elaborate*parse*left
   (state <s> ^superstate nil
              ^io.input-link.lg.parsed-sentence <sent>)
   (<sent> ^links.link <lk>
           ^words.word <wd>)
   (<wd> ^wcount <ct>)
   (<lk> ^lwleft <ct>)
-->
   (<lk> ^left <wd>)
}

sp {elaborate*parse*right
   (state <s> ^superstate nil
              ^io.input-link.lg.parsed-sentence <sent>)
   (<sent> ^links.link <lk>
           ^words.word <wd>)
   (<wd> ^wcount <ct>)
   (<lk> ^lwright <ct>)
-->
   (<lk> ^right <wd>)
}

sp {evaluate-parse*elaborate*init
   (state <s> ^name evaluate-parse
              ^superstate.operator.sentence-count <ct>
              ^top-state.io.input-link.lg.parsed-sentence <sent>)
   (<sent> ^sentence-count <ct>)
-->
   (<s> ^parse <sent>)
}

sp {evaluate-parse*elaborate*acceptable-parse
   (state <s> ^name evaluate-parse
              ^parse <parse>)
   (<parse> -^rejected)
-->
   (<s> ^acceptable-parse <parse>)
}

sp {evaluate-parse*elaborate*noun-phrase-cost*true
   (state <s> ^name evaluate-parse
              ^parse <parse>)
   (<parse> ^words.word.wvalue NOUN-PHRASE-WALL)
-->
   (<parse> ^noun-phrase-cost 1)
}

sp {evaluate-parse*elaborate*noun-phrase-cost*false
   (state <s> ^name evaluate-parse
              ^parse <parse>)
   (<parse> -^words.word.wvalue NOUN-PHRASE-WALL)
-->
   (<parse> ^noun-phrase-cost 0)
}

sp {evaluate-parse*elaborate*weighting*baseline
   (state <s> ^name evaluate-parse
              ^parse <parse>)
   (<parse> ^expensive-link-cost <elc>
            ^unused-word-cost <wc>
            ^noun-phrase-cost <npc>)
-->
   (<parse> ^cost (+ <elc> <npc>))
}

# eliminate all sentences completely that have excess unused words
# Can't think of cases where the correct parse has more unused words than an
# incorrect parse..
# If one occurs, we will have to integrate unused-word-cost into the overall
# score. This causes problems with pp-attachment reasoning, though, e.g., "the square
# to the right". The pp system ignores all scores other than the minimal, so
# will elevate the version where "to" attaches to the verb ("square" with "the"
# unused) over the correct noun-phrase parse.

sp {evaluate-parse*elevate*excess-unused-words
   (state <s> ^name evaluate-parse
              ^parse <p1>
              ^parse.unused-word-cost < <uwc>)
   (<p1> ^unused-word-cost <uwc>)
-->
   (<p1> ^rejected true)
}


sp {evaluate-parse*elaborate*minimal-acceptable-parse
   (state <s> ^name evaluate-parse
              ^acceptable-parse <parse>)
   (<parse> ^cost <pc>)
  -{(<s> ^acceptable-parse <parse2>)
    (<parse2> ^cost < <pc>)}
-->
   (<s> ^minimal-acceptable-parse <parse>)
}

sp {evaluate-parse*propose*approve-minimal-parse
   (state <s> ^name evaluate-parse
              ^minimal-acceptable-parse <parse>)
-->
   (<s> ^operator <o> + < =)
   (<o> ^name approve
        ^kind interpretation
        ^parse <parse>)
}

sp {evaluate-parse*apply*approve
   (state <s> ^name evaluate-parse
              ^operator <o>)
   (<o> ^name approve
        ^parse <parse>)
-->
  (<parse> ^parse-valid true)
}

# "get the book on the table in the room" should be:
# book (on (the table (in (the room)))
# not book (on (the table)) (in (the room))
# LG gives these both the same cost

sp {evaluate-parse*elaborate*multiple-m
   (state <s> ^name evaluate-parse
              ^minimal-acceptable-parse <mp>)
   (<mp> ^links.link <l1> {<> <l1> <l2>})
   (<l1> ^lwleft <left>
         ^ltype M)
   (<l2> ^lwleft <left>
         ^ltype M)
-->
   (<mp> ^has-multiple-m true)
}

sp {evaluate-parse*prefer*parse-without-multiple-M
   (state <s> ^name evaluate-parse
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name approve
         ^parse <mp1>)
   (<o2> ^name approve
         ^parse <mp2>)
   (<mp1> ^has-multiple-m true)
   (<mp2> -^has-multiple-m)
-->
   (<s> ^operator <o2> > <o1>)
}

# Reject minimal-acceptable-parses with bad pp attachments, even though LG may
# regard the proper attachment as worse (higher dis cost)

# MV links are verb->preposition, M links are noun->preposition

# "move (the sandwich) to (the plate  on  the table)" (1) to:MV on:M
# "move (the sandwich  on  the plate) to (the table)" (2) on:M  to:MV
# "move (the sandwich  on  the table) to (the plate)" (3) on:M  to:MV
# "move (the sandwich) to (the table) on (the plate)" (4) to:MV on:MV
# "move (the sandwich  on  the plate  on  the table)" (5) on:M  on:M
# "pick up (the fork   on  the left   of  the plate)" (6) on:M  of:M
# "pick up (the fork   to  the left   of  the plate)" (7) to:M  of:M
#        
# heuristic: "to" is an MV, "on" is an M
#  Case 4 doesn't work, needs knowledge that tables don't sit on plates, and that
# things can be moved on plates.
#
#  Case 7 doesn't work, needs knowledge that "pick(up)" is a verb that doesn't
#  normally take a preposition.
#
# We'll at least do better than LGP alone, since that tends to assign both as MV

# propose a resolution operator if there is a link that could be M or MV, and
# one of those possiblities is in the highest-ranked parse

# use global-wcounts here, which don't always start at 0 or correspond with the
# links, but are consistent parse-to-parse (where extra words may have been
# added)

sp {evaluate-parse*elaborate*preposition-attachment-ambiguity*first-MV
   (state <s> ^name evaluate-parse
              ^minimal-acceptable-parse <p1>
              ^acceptable-parse <p2>)
   (<p1> ^links.link <mv>)
   (<p2> ^cost <ct>
         ^links.link <m>)
   (<mv> ^ltype MV
         ^left.wvalue <mv-left-word>
         ^right.wvalue <right-val>
         ^right.global-wcount <right-count>)
   (<m> ^ltype M
        ^left.wvalue <m-left-word>
        ^right.global-wcount <right-count>)
-->
   (<s> ^preposition-attachment-ambiguity <paa>)
   (<paa> ^parse-rank <ct>
          ^prep-rank <right-count>
          ^m-left <m-left-word>
          ^mv-left <mv-left-word>
          ^right <right-val>
          ^m-parse <p2>
          ^mv-parse <p1>)
}


sp {evaluate-parse*elaborate*preposition-attachment-ambiguity*first-M
   (state <s> ^name evaluate-parse
              ^acceptable-parse <p1>
              ^minimal-acceptable-parse <p2>)
   (<p1> ^cost <ct>
         ^links.link <mv>)
   (<p2> ^links.link <m>
         ^words.word <mlw>)
   (<mv> ^ltype MV
         ^left.wvalue <mv-left-word>
         ^right.wvalue <right-val>
         ^right.global-wcount <right-count>)
   (<m> ^ltype M
        ^left.wvalue <m-left-word>
        ^right.global-wcount <right-count>)
-->
   (<s> ^preposition-attachment-ambiguity <paa>)
   (<paa> ^parse-rank <ct>
          ^prep-rank <right-count>
          ^m-left <m-left-word>
          ^mv-left <mv-left-word>
          ^right <right-val>
          ^m-parse <p2>
          ^mv-parse <p1>)
}

#   (<s> ^operator <o> +)
#   (<o> ^name resolve-ambiguous-preposition-attachment
#        ^rank <ct>
#        ^mv-left <mv-left-word>
#        ^m-left <m-left-word>
#        ^right <right-val>
#        ^mv-parse <p1>
#        ^m-parse <p2>)
#}

sp {evaluate-parse*elaborate*leftmost-ambiguity
   (state <s> ^name evaluate-parse
             -^preposition-attachment-ambiguity.prep-rank < <pr>
              ^preposition-attachment-ambiguity <paa>)
   (<paa> ^prep-rank <pr>)
-->
   (<paa> ^minimal-prep-rank true)
}

sp {evaluate-parse*elaborate*lowest-parse-ambiguity
   (state <s> ^name evaluate-parse
              ^preposition-attachment-ambiguity <paa>)
   (<paa> ^parse-rank <pr>
          ^minimal-prep-rank true)
  -{(<s> ^preposition-attachment-ambiguity <paa2>)
    (<paa2> ^minimal-prep-rank true
            ^parse-rank < <pr>)}
-->
   (<paa> ^minimal-parse-rank true)
}

sp {evaluate-parse*propose*resolve-ambiguous-preposition-attachment
   (state <s> ^name evaluate-parse
              ^preposition-attachment-ambiguity <paa>)
   (<paa> ^minimal-parse-rank true
          ^minimal-prep-rank true)
-->
   (<s> ^operator <o> + =)
   (<o> ^name resolve-ambiguous-preposition-attachment
        ^info <paa>)
}

# choose the M version, unless the word is "to"

sp {evaluate-parse*apply*resolve-ambiguous-preposition-attachment*m
   (state <s> ^name evaluate-parse
              ^operator <o>)
   (<o> ^name resolve-ambiguous-preposition-attachment
        ^info <paa>)
   (<paa> -^right << to >>
         ^right <right>
        ^mv-parse <parse>
        ^mv-parse.parse-count <rc>
        ^m-parse.parse-count <gc>)
-->
   (<parse> ^rejected true)
   (write (crlf) |rejected parse | <rc> | in favor of | <gc> | due to | <right> | link|)
}

sp {evaluate-parse*apply*resolve-ambiguous-preposition-attachment*mv
   (state <s> ^name evaluate-parse
              ^operator <o>)
   (<o> ^name resolve-ambiguous-preposition-attachment
        ^info <paa>)
   (<paa> ^right << to >>
        ^right <right>
        ^m-parse <parse>
        ^m-parse.parse-count <rc>
        ^mv-parse.parse-count <gc>)
-->
   (<parse> ^rejected true)
   (write (crlf) |rejected parse | <rc> | in favor of | <gc> | due to |
         <right> | link|)
}

sp {evaluate-parse*elaborate*report-chosen
   (state <s> ^name evaluate-parse
              ^parse <parse>)
   (<parse> ^parse-valid true
            ^parse-count <ct>)
-->
   (write (crlf) |evaluate-parse chose parse | <ct> )
}

