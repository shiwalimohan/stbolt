# This runs after the parser, before LGSoar.
# 
# - If the parse fails, try reparsing as a noun phrase
# - If there are multiple parses, allow Soar knowledge to select a non-default
# parse. Specifically:
# "Pick up the square to the right of the triangle"
# This parses by attaching the preposition to the verb, not the object.
# Need to detect the verb ("pick up"), get knowledge that it has no PP. Then,
# select best parse that doesn't give it one.
#
# "Describe the relationship between the arch and the triangle."
# Similarly, the "between" attaches to "describe" wrongly in the first parse.


sp {evaluate-parse*elaborate*init
   (state <s> ^name evaluate-parse
              ^superstate.operator.sentence-count <ct>
              ^top-state.io.input-link.lg.parsed-sentence <sent>)
   (<sent> ^sentence-count <ct>)
-->
   (<s> ^parse <sent>)
}

sp {evaluate-parse*elaborate*acceptable-parse
   (state <s> ^name evaluate-parse
              ^parse <parse>)
   (<parse> -^rejected)
-->
   (<s> ^acceptable-parse <parse>)
}

sp {evaluate-parse*elaborate*minimal-acceptable-parse
   (state <s> ^name evaluate-parse
              ^acceptable-parse <parse>)
   (<parse> ^parse-count <pc>)
  -{(<s> ^acceptable-parse <parse2>)
    (<parse2> ^parse-count < <pc>)}
-->
   (<s> ^minimal-acceptable-parse <parse>)
}

sp {evaluate-parse*propose*approve-minimal-parse
   (state <s> ^name evaluate-parse
              ^minimal-acceptable-parse <parse>)
-->
   (<s> ^operator <o> + <)
   (<o> ^name approve
        ^kind interpretation
        ^parse <parse>)
}

sp {evaluate-parse*apply*approve
   (state <s> ^name evaluate-parse
              ^operator <o>)
   (<o> ^name approve
        ^parse <parse>)
-->
  (<parse> ^parse-valid true)
}

# reparse if there are any words not involved in links
sp {evaluate-parse*propose*reparse-as-noun-phrase
   (state <s> ^name evaluate-parse
              ^minimal-acceptable-parse <parse>)
   (<parse> ^words.word <wd>
           -^links.link.<< lwleft lwright >> <wc>)
   (<wd> ^wcount <wc>
        -^wvalue and) # "and" has no links
-->
   (<s> ^operator <o> + =
        ^kind interpretation)
   (<o> ^name reparse-as-noun-phrase)
}

# strict version that only reparses after complete failure

# sp {evaluate-parse*propose*reparse-as-noun-phrase
#    (state <s> ^name evaluate-parse
#               ^minimal-acceptable-parse <parse>)
#    (<parse> ^words.word <exists>
#            -^links.link <any>)
# -->
#    (<s> ^operator <o> + =
#         ^kind interpretation)
#    (<o> ^name reparse-as-noun-phrase)
# }


# prepend a verb to the "sentence", so if the phrase describes an object it looks
# like a command (e.g., "the red block" to "acquire the red block")
sp {evaluate-parse*apply*reparse-as-noun-phrase*first-word
   (state <s> ^name evaluate-parse
              ^operator.name reparse-as-noun-phrase
              ^top-state.io.output-link <ol>
              ^top-state.sentence-mapping <map>
              ^superstate.operator.sentence-count <sc>
              ^minimal-acceptable-parse.words.word <wd>)
   (<wd> ^wcount 0
         ^wvalue <val>)
   (<map> ^sentence-count <sc>)
-->
   (<ol> ^preprocessed-sentence <ps>)
   (<ps> ^sentence-count <sc> 
         ^start <st>)
   (<st> ^word |generic-word.v.4.1[19]|
         # this is a transitive verb, infinitive/plural form, like "acquire"
         # use the 19th (last) generic to prevent conflicts
         ^wcount -1)
   (<s> ^output-word <st>
        ^output-word <w1>)
   (<map> ^word <wd>)

   # info so it can be unmapped and filtered out in postprocessing
   (<wd> ^parser-wvalue |generic-word.v.4.1[19]|
         ^is-filler true)

   # flag so we don't attach anything to the fake verb
   (<s> ^fake-verb true)
}

sp {evaluate-parse*apply*reparse-as-noun-phrase*next-word
   (state <s> ^name evaluate-parse
              ^operator.name reparse-as-noun-phrase
              ^minimal-acceptable-parse.words.word <next-word>
              ^output-word <last-word>)
   (<last-word> ^wcount <last-count>)
   (<next-word> ^wcount <next-count> > <last-count>
                ^wvalue {<> LEFT-WALL <> RIGHT-WALL <val>})
  -{(<s> ^minimal-acceptable-parse.words.word <intervening-word>)
   (<intervening-word> ^wcount > <last-count>
                       ^wcount < <next-count>
                       ^wvalue {<> LEFT-WALL <> RIGHT-WALL})}
-->
   (<last-word> ^next <xt>)
   (<xt> ^word <val>
         ^wcount <next-count>)
   (<s> ^output-word <xt>)
}

sp {evaluate-parse*apply*reparse-as-noun-phrase*last-word
   (state <s> ^name evaluate-parse
              ^operator.name reparse-as-noun-phrase
              ^minimal-acceptable-parse <os>
              ^output-word <last-word>)
   (<last-word> ^wcount <last-count>)
   -{(<s> ^minimal-acceptable-parse.words.word <later-word>)
     (<later-word> ^wcount > <last-count>
                   ^wvalue <> RIGHT-WALL)}
-->
   (<os> ^rejected true)
} 

# MV links are verb->preposition, M links are noun->preposition

# "move (the sandwich) to (the plate  on  the table)" (1) to:MV on:M
# "move (the sandwich  on  the plate) to (the table)" (2) on:M  to:MV
# "move (the sandwich  on  the table) to (the plate)" (3) on:M  to:MV
# "move (the sandwich) to (the table) on (the plate)" (4) to:MV on:MV
# "move (the sandwich  on  the plate  on  the table)" (5) on:M  on:M
# "pick up (the fork   on  the left   of  the plate)" (6) on:M  of:M
# "pick up (the fork   to  the left   of  the plate)" (7) to:M  of:M
#        
# heuristic: "to" is an MV, "on" is an M
#  Case 4 doesn't work, needs knowledge that tables don't sit on plates, and that
# things can be moved on plates.
#
#  Case 7 doesn't work, needs knowledge that "pick(up)" is a verb that doesn't
#  normally take a preposition.
#
# We'll at least do better than LGP alone, since that tends to assign both as MV

# propose a resolution operator if there is a link that could be M or MV, and
# one of those possiblities is in the highest-ranked parse

sp {evaluate-parse*elaborate*preposition-attachment-ambiguity*first-MV
   (state <s> ^name evaluate-parse
              ^minimal-acceptable-parse <p1>
              ^acceptable-parse <p2>)
   (<p1> ^links.link <mv>
         ^words.word <mvlw>
         ^words.word <right-word>)
   (<p2> ^parse-count <ct>
         ^links.link <m>
         ^words.word <mlw>)
   (<mv> ^ltype MV
         ^lwleft <mvl>
         ^lwright <right>)
   (<mvlw> ^wcount <mvl>
           ^wvalue <mv-left-word>)
   (<m> ^ltype M
        ^lwleft <ml>
        ^lwright <right>)
   (<mlw> ^wcount <ml>
          ^wvalue <m-left-word>)
   (<right-word> ^wcount <right>
                 ^wvalue <right-val>)
-->
   (<s> ^operator <o> +)
   (<o> ^name resolve-ambiguous-preposition-attachment
        ^rank <ct>
        ^mv-left <mv-left-word>
        ^m-left <m-left-word>
        ^right <right-val>
        ^mv-parse <p1>
        ^m-parse <p2>)
}

sp {evaluate-parse*elaborate*preposition-attachment-ambiguity*first-M
   (state <s> ^name evaluate-parse
              ^acceptable-parse <p1>
              ^minimal-acceptable-parse <p2>)
   (<p1> ^parse-count <ct>
         ^links.link <mv>
         ^words.word <mvlw>
         ^words.word <right-word>)
   (<p2> ^links.link <m>
         ^words.word <mlw>)
   (<mv> ^ltype MV
         ^lwleft <mvl>
         ^lwright <right>)
   (<mvlw> ^wcount <mvl>
           ^wvalue <mv-left-word>)
   (<m> ^ltype M
        ^lwleft <ml>
        ^lwright <right>)
   (<mlw> ^wcount <ml>
          ^wvalue <m-left-word>)
   (<right-word> ^wcount <right>
                 ^wvalue <right-val>)
-->
   (<s> ^operator <o> +)
   (<o> ^name resolve-ambiguous-preposition-attachment
        ^kind interpretation
        ^rank <ct>
        ^mv-left <mv-left-word>
        ^m-left <m-left-word>
        ^right <right-val>
        ^mv-parse <p1>
        ^m-parse <p2>)
}

# only resolve-ambiguous-preposition-attachment if the best parse is one of the options
# consider that vs. the highest-ranked alternative

sp {preposition-attachment-ambiguity*prefer*lowest
   (state <s> ^name evaluate-parse
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name resolve-ambiguous-preposition-attachment
         ^rank <p1>)
   (<o2> ^name resolve-ambiguous-preposition-attachment
         ^rank > <p1>)
-->
   (<s> ^operator <o1> > <o2>)
}

sp {preposition-attachment-ambiguity*prefer*mv-first # break ties randomly
   (state <s> ^name evaluate-parse
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name resolve-ambiguous-preposition-attachment
         ^rank <p1>)
   (<o2> ^name resolve-ambiguous-preposition-attachment
         ^rank <p1>)
-->
   (<s> ^operator <o1> = <o2>)
}

# choose the M version, unless the word is "to"

sp {evaluate-parse*apply*resolve-ambiguous-preposition-attachment*m
   (state <s> ^name evaluate-parse
              ^operator <o>)
   (<o> ^name resolve-ambiguous-preposition-attachment
        -^right << to >>
         ^right <right>
        ^mv-parse <parse>
        ^mv-parse.parse-count <rc>
        ^m-parse.parse-count <gc>)
-->
   (<parse> ^rejected true)
   (write (crlf) |rejected parse | <rc> | in favor of | <gc> | due to | <right> | link|)
}

# if the verb is fake, don't attach to it
sp {evaluate-parse*apply*resolve-ambiguous-preposition-attachment*m*fake-verb
   (state <s> ^name evaluate-parse
              ^fake-verb true
              ^operator <o>)
   (<o> ^name resolve-ambiguous-preposition-attachment
        ^mv-parse <parse>)
-->
   (<parse> ^rejected true)
}

sp {evaluate-parse*apply*resolve-ambiguous-preposition-attachment*mv
   (state <s> ^name evaluate-parse
             -^fake-verb
              ^operator <o>)
   (<o> ^name resolve-ambiguous-preposition-attachment
        ^right << to >>
        ^right <right>
        ^m-parse <parse>
        ^m-parse.parse-count <rc>
        ^mv-parse.parse-count <gc>)
-->
   (<parse> ^rejected true)
   (write (crlf) |rejected parse | <rc> | in favor of | <gc> | due to | <right> | link|)
}

sp {evaluate-parse*elaborate*report-chosen
   (state <s> ^name evaluate-parse
              ^parse <parse>)
   (<parse> ^parse-valid true
            ^parse-count <ct>)
-->
   (write (crlf) |evaluate-parse chose parse | <ct> )
}
