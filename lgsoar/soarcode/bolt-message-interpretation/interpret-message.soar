sp {interpret-message*elaborate*init
   (state <s> ^name interpret-message
              ^superstate.operator.lgsoar-predicates <pred>)
-->
   (<s> ^lgsoar-predicates <pred>)
}

# verb-commands have the HEARER
sp {interpret-message*propose*interpret-verb-command
   (state <s> ^name interpret-message
              ^lgsoar-predicates <pred>
              ^objects <ob>)
   (<pred> -^interpretation
            ^predicate <p1>)
   (<p1> ^outer << HEARER you >>
         ^inner1 <hearer>
        -^ignored)
-->
   (<s> ^operator <o> +)
   (<o> ^name interpret-verb-command
        ^predicates <pred>
        ^objects <ob>)
}

# anything might be an object-message
sp {interpret-message*propose*interpret-object-message
   (state <s> ^name interpret-message
              ^lgsoar-predicates <pred>
              ^objects <ob>)
   (<pred> -^interpretation)
-->
   (<s> ^operator <o> +)
   (<o> ^name interpret-object-message
        ^predicates <pred>
        ^objects <ob>)
}

sp {interpret-message*propose*interpret-goal-object-message
   (state <s> ^name interpret-message
              ^lgsoar-predicates <pred>
              ^objects <ob>)
   (<pred> -^interpretation
            ^predicate.outer goal)
-->
   (<s> ^operator <o> +)
   (<o> ^name interpret-goal-object-message
        ^predicates <pred>
        ^objects <ob>)
}

# relation-message must have a 2-parameter predicate
# DEPRECATED

# sp {interpret-message*propose*interpret-relation-message
#    (state <s> ^name interpret-message
#               ^lgsoar-predicates <pred>)
#    (<pred> -^interpretation
#             ^predicate <p1>)
#    (<p1> ^inner1 <i1>
#          ^inner2 <i2>
#         -^ignored)
# -->
#    (<s> ^operator <o> +)
#    (<o> ^name interpret-relation-message
#         ^predicates <pred>)
# }

# goal-relation-message same but with goal predicate
sp {interpret-message*propose*interpret-goal-relation-message
   (state <s> ^name interpret-message
              ^lgsoar-predicates <pred>
              ^objects <on>)
   (<pred> -^interpretation
            ^predicate <p1>
            ^predicate.outer goal)
   (<p1> ^inner1 <i1>
         ^inner2 <i2>
        -^ignored)
-->
   (<s> ^operator <o> +)
   (<o> ^name interpret-goal-relation-message
        ^predicates <pred>
        ^objects <ob>)
}

# object-questions must have a what or which or where pred
sp {interpret-message*propose*interpret-object-question
   (state <s> ^name interpret-message
              ^lgsoar-predicates <pred>
              ^objects <ob>)
   (<pred> -^interpretation
            ^predicate <p1>)
   (<p1> ^outer << what which where >>
        -^ignored)
-->
   (<s> ^operator <o> +)
   (<o> ^name interpret-object-question
        ^predicates <pred>
        ^objects <ob>)
}

# relation-questions must have a what or which pred and a relation
sp {interpret-message*propose*interpret-relation-question
   (state <s> ^name interpret-message
              ^lgsoar-predicates <pred>
              ^objects <ob>)
   (<pred> -^interpretation
            ^predicate <p1>
            ^predicate <p2>)
   (<p1> ^outer << what which >>
        -^ignored)
   (<p2> ^inner1 <i1>
         ^inner2 <i2>
        -^ignored)
-->
   (<s> ^operator <o> +)
   (<o> ^name interpret-relation-question
        ^predicates <pred>
        ^objects <ob>)
}

sp {interpret-message*propose*interpret-single-word-response
   (state <s> ^name interpret-message
              ^lgsoar-predicates <pred>)
   (<pred> -^interpretation
            ^predicate <p1>)
   (<p1> ^outer single-word
        -^ignored)
-->
   (<s> ^operator <o> +)
   (<o> ^name interpret-single-word-response
        ^predicates <pred>)
}

# single-word-responses are done in place here
sp {interpret-message*apply*interpret-single-word-response
   (state <s> ^name interpret-message
              ^operator <o>)
   (<o> ^name interpret-single-word-response
              ^predicates <pred>)
   (<pred> ^predicate.inner1 <word>)
-->
   (<pred> ^interpretation <int>)
   (<int> ^single-word-response.response <word>)
}

# verb-completion-message: revised from verb command if past tense is detected
# (could be "you" based, but "you should put the block on the table" has same
# DRS as "you put the block on the table")

# single-word response:  need to add metalevel for unparsable sentences -> raw
# word representation


sp {interpret-message*prefer*anything-over-object-message
   (state <s> ^name interpret-message
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name interpret-object-message)
   (<o2> ^kind message-interpretation
        -^name interpret-object-message)
-->
   (<s> ^operator <o2> > <o1>)
}

sp {interpret-message*prefer*relation-question-over-relation
   (state <s> ^name interpret-message
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name interpret-relation-message)
   (<o2> ^name interpret-relation-question)
-->
   (<s> ^operator <o2> > <o1>)
}

sp {interpret-message*prefer*goal-relation-over-relation
   (state <s> ^name interpret-message
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name interpret-relation-message)
   (<o2> ^name interpret-goal-relation-message)
-->
   (<s> ^operator <o2> > <o1>)
}

sp {interpret-message*prefer*goal-relation-over-goal-object
   (state <s> ^name interpret-message
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name interpret-goal-object-message)
   (<o2> ^name interpret-goal-relation-message)
-->
   (<s> ^operator <o2> > <o1>)
}

# "to the right of" has two 2d preds
sp {interpret-message*prefer*indifferent-relation
   (state <s> ^name interpret-message
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name interpret-relation-message)
   (<o2> ^name interpret-relation-message)
-->
   (<s> ^operator <o2> = <o1>)
}

sp {interpret-message*prefer*indifferent-question
   (state <s> ^name interpret-message
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name interpret-relation-question)
   (<o2> ^name interpret-relation-question)
-->
   (<s> ^operator <o2> = <o1>)
}

sp {interpret-message*prefer*relation-question-over-object-question
   (state <s> ^name interpret-message
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name interpret-object-question)
   (<o2> ^name interpret-relation-question)
-->
   (<s> ^operator <o2> > <o1>)
}

sp {interpret-message*prefer*verb-command-over-any
   (state <s> ^name interpret-message
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name interpret-verb-command)
   (<o2> ^kind message-interpretation
        -^name interpret-verb-command)
-->
   (<s> ^operator <o1> > <o2>)
}

# primitive objects are interpreted first thing in message interpretation
# interpretation structures are stored right on the model

sp {interpret-message*elaborate*objects
   (state <s> ^name interpret-message)
-->
   (<s> ^objects <ob>)
}

sp {interpret-message*elaborate*primitive-object-symbol
   (state <s> ^name interpret-message
              ^objects <ob>
              ^lgsoar-predicates.predicate <pr>)
   (<pr> ^<< inner1 inner2 inner3 >> <val>)
   (<val> ^<is-an-identifier>)
-->
   (<ob> ^object <val>)
}

sp {interpret-message*elaborate*object*predicates
   (state <s> ^name interpret-message
              ^objects.object <po>)
-->
   (<po> ^predicates <pr>)
}


sp {interpret-message*elaborate*object*collect
   (state <s> ^name interpret-message
              ^objects.object <po>
              ^lgsoar-predicates.predicate <pr>)
   (<pr> ^inner1 <po>
        -^outer << what which where HEARER you PRIMARY_OBJECT goal >> 
        -^inner2)
   (<po> ^predicates <prp>)
-->
   (<prp> ^predicate <pr>)
}

sp {interpret-message*propose*interpret-primitive-object
   (state <s> ^name interpret-message
              ^objects.object <pi>)
   (<pi> ^predicates <pr>)
   (<pr> -^interpretation)
-->
   (<s> ^operator <o> + =)
   (<o> ^name interpret-primitive-object
        ^predicates <pr>)
}

