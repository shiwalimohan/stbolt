# File: clause.soar
# Author: William Taysom
# Created: July 7, 2001
#
# Desc: Handles clause related productions.
#
# Operators: recognize-phrase (CO, TH), recognize-main-verb, recognize-introductory-verb,
#			 hide-main-verb, free-bindings, handle-that-clause
#
#
# 7 June 2011: soar9 conversion: DWL removed attr prefs, added o-support
#

## recognize-phrase

sp {clause*propose*recognize-that-phrase
   (state <s> ^count <count> ^io.lgsentence <cs> ^clauses <clauses>)
   (<cs> ^count <count> ^links.link <link> ^words.word <that> <main-S>)
   (<main-S> ^wcount <main-S-count>)
   (<that> ^wcount <that-count>)
   (<link> ^ltype TH ^lwleft <main-S-count> ^lwright <that-count> -^handled-as)
  -{(<clauses> ^clause <clause> ^that)
     (<clause> ^count <count>)}
-->
   (<s> ^operator <o> +)
   (<o> ^name recognize-phrase ^priority 230 + ^main-S <main-S>  + ^that <that> + ^link <link> +
   	 ^order <that-count> + ^level-two-order <main-S-main-count> + ^complete? no +)}

sp {clause*propose*recognize-introductory-phrase
   (state <s> ^count <count> ^io.lgsentence <cs> ^clauses <clauses>)
   (<cs> ^count <count> ^links.link <link> ^words.word <conj> <main-S>)
   (<main-S> ^wcount <main-S-count>)
   (<conj> ^wcount <conj-count>)
   (<link> ^ltype CO ^lwleft <conj-count> ^lwright <main-S-count> -^handled-as)
  -{(<clauses> ^clause <clause> ^conj)
     (<clause> ^count <count>)}
-->
   (<s> ^operator <o> +)
   (<o> ^name recognize-phrase + ^priority 230 + ^main-S <main-S> + ^conj <conj> + ^link <link> +
   	 ^order <conj-count> + ^level-two-order <main-S-count> + ^complete? no +)}

sp {clause*apply*recognize-phrase
  :o-support
   (state <s> ^operator <o> ^count <count> ^clauses <clauses>)
   (<o> ^name recognize-phrase ^main-S <main-S> ^<< that conj >> <arg> ^link <link>
   	 ^complete? no)
   (<o> ^<aug> <arg>)
   (<arg> ^wvalue <wvalue>)
-->
   (<clauses> ^clause <clause> +)
   (<clause> ^count <count> + ^main-S <main-S> + ^<aug> <arg> +)
   (<link> ^handled-as <wvalue> +)
   (<o> ^complete?x yes +)}

### recognize-main-verb
### these involve either TH or CO
### these are for the matrix clause's verb

sp {clause*propose*recognize-main-verb*if-main-does-not-carry-infl
   (state <s> ^count <count> ^io.lgsentence <cs> ^clauses.clause <clause>)
   (<cs> ^count <count> ^links.link <link> ^words.word <main-S> <main>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<main-S> ^wcount <main-S-count>)
   (<link> ^ltype S ^lwleft <main-S-count> ^lwright <main-count>)
   (<clause> ^count <count> -^main ^main-S <main-S>)
-->
   (<s> ^operator <o> +)
   (<o> ^name recognize-main-verb ^priority 230 ^main <main>
   	 ^order <main-S-count> ^level-two-order <main-count> ^complete? no)}

sp {clause*propose*recognize-main-verb*if-main-carries-infl
   (state <s> ^count <count> ^io.lgsentence <cs> ^clauses.clause <clause>)
   (<cs> ^count <count> ^links.link <S-link> <I-link> ^words.word <main-S> <main> <infl>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<main-S> ^wcount <main-S-count>)
   (<infl> ^wcount <infl-count>)
   (<S-link> ^ltype S ^lwleft <main-S-count> ^lwright <infl-count>)
   (<I-link> ^ltype I ^lwleft <infl-count> ^lwright <main-count>)
   (<clause> ^count <count> -^main ^main-S <main-S>)
-->
   (<s> ^operator <o> +)
   (<o> ^name recognize-main-verb ^priority 230 ^main <main>
   	 ^order <main-S-count> ^level-two-order <main-count> ^complete? no)}

sp {clause*apply*recognize-main-verb
  :o-support
   (state <s> ^operator <o> ^count <count> ^clauses.clause <clause>)
   (<o> ^name recognize-main-verb ^main <main> ^complete? no ^order <main-S-count>)
   (<clause> ^count <count> ^main-S.wcount <main-S-count>)
-->
   (<clause> ^main <main> +)
   (<o> ^complete?x yes +)}


### recognize-introductory-verb
### these are for a tensed pre-matrix dependent clause

sp {clause*propose*recognize-introductory-verb-fix*if-intro-carries-infl
   (state <s> ^count <count> ^io.lgsentence <cs> ^clauses.clause <clause>)
   (<cs> ^count <count> ^links.link <I-link> ^words.word <intro> <infl>)
   (<intro> ^wcount <intro-count>)
   (<infl> ^wcount <infl-count>)
   (<I-link> ^ltype I ^lwleft <infl-count> ^lwright <intro-count>)
   (<clause> ^count <count> ^intro <infl>)
-->
   (<s> ^operator <o> +)
   (<o> ^name recognize-introductory-verb-fix + ^priority 235 + ^intro <infl> + ^fix <intro> +
   	 ^order <infl-count> + ^level-two-order <intro-count> + ^complete? no +)}
       
sp {clause*apply*recognize-introductory-verb-fix*if-intro-carries-infl
   (state <s> ^operator <o> ^count <count> ^clauses.clause <clause>)
   (<o> ^name recognize-introductory-verb-fix ^intro <infl> ^fix <intro> ^complete? no)
   (<clause> ^count <count> ^intro <infl>)
-->
   (<clause> ^intro <infl> - <intro> +)
   (<clause> ^fixed verb)
   (<o> ^complete?x yes +)}

### recognize-introductory-verb
### these are for an untensed pre-matrix dependent clause

sp {clause*propose*recognize-introductory-verb*if-intro-does-not-carry-infl
   (state <s> ^count <count> ^io.lgsentence <cs> ^clauses.clause <clause>)
   (<cs> ^count <count> ^links.link <C-link> <S-link> ^words.word <conj> <intro-S> <intro>)
   (<conj> ^wcount <conj-count>)
   (<intro-S> ^wcount <intro-S-count>)
   (<intro> ^wcount <intro-count>)
   (<C-link> ^ltype C ^lwleft <conj-count> ^lwright <intro-S-count>)
   (<S-link> ^ltype S ^lwleft <intro-S-count> ^lwright <intro-count>)
   (<clause> ^count <count> -^intro ^<< that conj >> <conj> -^fixed)
-->
   (<s> ^operator <o> +)
   (<o> ^name recognize-introductory-verb ^priority 230 ^intro <intro>
   	 ^order <conj-count> ^level-two-order <intro-count> ^complete? no)}

sp {clause*apply*recognize-introductory-verb*if-intro-does-not-carry-infl
  :o-support
   (state <s> ^operator <o> ^count <count> ^clauses.clause <clause>)
   (<o> ^name recognize-introductory-verb ^intro <intro> -^fix ^order <conj-count> ^complete? no)
   (<clause> ^count <count> ^<< that conj >>.wcount <conj-count>)
-->
   (<clause> ^intro <intro> +)
   (<o> ^complete?x yes +)}

## hide-main-verb

sp {clause*propose*hide-main-verb
   (state <s> ^count <count> ^refsets.refs <refs> ^clauses.clause <clause>)
   (<refs> ^ref <ref>)
   (<clause> ^count <count> ^intro <intro> ^main <main> ^conj <conj> -^free bindings)
   (<conj> ^wvalue <conj-wvalue>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<intro> ^wcount <intro-count>)
-->
   (<s> ^operator <o> +)
   (<o> ^name hide-main-verb + ^priority 230 + ^main <main> + ^aug <conj-wvalue> + ^arg <intro> + ^refs <refs> +
   	 ^clause <clause> + ^order <intro-count> + ^level-two-order <main-count> + ^complete? no +)}

sp {clause*apply*hide-main-verb
   (state <s> ^operator <o>)
   (<o> ^name hide-main-verb ^main <main> ^aug <aug> ^arg <arg> ^refs <refs> ^clause <clause>
   	 ^complete? no)
   (<main> ^ref <main-ref>)
-->
   (<main-ref> ^<aug> <arg-ref> +)
   (<clause> ^ref <main-ref>)
   (<main> ^ref <main-ref> -)
   (<main> ^hidden ref +)
   (<refs> ^ref <main-ref> -)
   (<refs> ^ref <arg-ref> +)
   (<arg-ref> ^head <arg> ^rooted-in <main>)
   (<arg> ^ref <arg-ref>)
   (<o> ^complete?x yes +)}

## handle-that-clause

sp {clause*propose*handle-that-clause
   (state <s> ^count <count> ^refsets.refs <refs> ^clauses.clause <clause>)
   (<refs> ^ref <ref> -^complete?)
   (<clause> ^count <count> ^intro <intro> ^main-S <main> ^that <that>)
   (<main> ^ref <ref> ^wcount <main-count>)
   (<intro> ^wcount <intro-count>)
   (<ref> -^aug.that)
-->
   (<s> ^operator <o> +)
   (<o> ^name handle-that-clause ^priority 10 ^main <main> ^arg <intro> ^refs <refs>
   	 ^clause <clause> ^order <main-count> ^level-two-order <intro-count> ^complete? no)}

sp {clause*apply*handle-that-clause
   (state <s> ^operator <o>)
   (<o> ^name handle-that-clause ^main <main> ^arg <arg> ^refs <refs> ^clause <clause>
   	 ^complete? no)
   (<main> ^ref <main-ref>)
-->
   (<main-ref> ^aug <arg-ref> +)
   (<clause> ^ref <main-ref>)
   (<refs> ^ref <arg-ref> +)
   (<arg-ref> ^head <arg> ^that <main>)
   (<arg> ^ref <arg-ref>)
   (<o> ^complete?x yes +)}

## free-bindings

sp {clause*propose*free-bindings
   (state <s> ^impasse no-change ^superstate <ss>)
   (<ss> ^superstate nil ^count <count> ^clauses.clause <clause>)
   (<clause> ^count <count> -^unblocked centers ^ref <ref> -^free bindings -^that)
-->
   (<ss> ^operator <o> + >)
   (<o> ^name free-bindings + ^priority 0 + ^clause <clause> + ^complete? no +)}

sp {clause*apply*free-bindings
   (state <s> ^operator <o> ^refsets.refs <refs> ^anaphor <a>)
   (<o> ^name free-bindings ^clause <clause> ^complete? no)
   (<clause> ^count <count> ^main <main> ^ref <ref>)
   (<refs> ^count <count>)
   (<main> ^hidden ref)
-->
   (<a> ^unblock? no - general +)
   (<refs> ^ref <ref> +)
   (<main> ^hidden ref -)
   (<main> ^ref <ref> +)
   (<clause> ^free bindings +) 
   (<o> ^complete?x yes +)
}
