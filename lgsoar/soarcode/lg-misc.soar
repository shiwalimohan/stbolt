## from productions2b.soar
# replace original versions in refsoar/lgrefsoar.soar


sp {realize*apply*ref*as*new-idea
	(state <s> ^operator <o> ^model <m>)
	(<o> ^name new-idea ^ref <ref>)
	(<ref> ^head <head>)
	(<head> ^wvalue <nuc> ^wcount <wcount>)
-->
	(<m> ^idea <new> +)
#	(<new> ^wcount <wccount>)
	(<new> ^nuc <nuc> ^wcount <wcount> +)
	(<ref> ^pointer <new>)
}

## nothing from prep-prods.soar

## from conjprods.soar

sp {global*prefer*operator-with-lowest-order*if-priority-is-equal*has-new
	(state <s> ^operator <deferred> + <preferred> +)
	(<deferred> ^priority <priority> ^new <n1val>)
	(<preferred> ^priority <priority> ^new <n2val> < <n1val>)
-->
	(<s> ^operator <preferred> > <deferred>)}
	
	
	
## from adj-prods.soar

#---------The following section contains Soar productions that add Link-Grammar link infor to the state---------#

sp {interpret*propose*P*as*internal
	(state <s> ^count <count> ^io <io>)
  	(<io> ^lgsentence <lgs> )
	(<lgs> ^count <count> ^links.link <link> ^words.word <int> <main>)

#<main> is for those that contain a ^ref <ref> and a ^wcount <main-count>
#<int> is for those that don't contain a ^ref <ref>, but do have a ^wcount <int-count>	
	(<main> ^ref <ref> ^wcount <main-count>)
	(<int> ^wcount <int-count>)
	## not predicate PP, though...so block ^ltypesub p
	(<link> ^ltype P -^ltypesub p ^lwleft <main-count> ^lwright <int-count> -^handled-as)
-->
	(<s> ^operator <o> +)
	(<o> ^name add-arg ^priority 150 ^main <main> ^aug int ^arg <int> ^link <link>
		 ^kind single ^order <main-count> ^level-two-order <int-count>
		 )
}


#This production takes out the "P" in the ^ltype so that is isn't counted as a root
sp {global*propose*find-root
	(state <s> ^count <count> ^io.lgsentence <cs> ^root <old>)
	(<cs> ^count <count> ^links.link <link> ^words.word <child> <parent>)
	(<child> ^wcount <old> ^wvalue <oldVal>)
	(<parent> ^wcount <new> ^wvalue <newVal>)
	(<link> ^lwleft <old> ^lwright <new>)
	(<link> ^ltype {<< AN D A AA AF AM AN BW D DD DG DP DT E EA EC EE EI EN EZ G GN H I MF
					  NR NS NT NW S SX TD TH TI TM TO W WR Y YP YS  >> <type>})
-->
	(<s> ^operator <o> + >)
	(<o> ^name find-root ^priority 170 ^new <new> 
       ^debug-info (concat |found root of | <type> | link from "| <oldVal> |" to "| <newVal> |"|))
}


sp {|interpret*propose*AN*as*noun-auging-noun|
    (state <s> ^io <i*1> ^count <count>)
    (<i*1> ^lgsentence <cs>)
    (<cs> ^count <count> ^words <w*1> ^links <l*1>)
    (<w*1> ^word <arg> ^word <main>)
    (<arg> ^wcount <arg-count>)
    (<main> ^wcount <main-count> ^ref <ref>)
    (<l*1> ^link <link>)
    (<link> -^handled-as <h*1> ^lwleft <arg-count> ^lwright <main-count>
          ^ltype |AN| )
    -->
    (<s> ^operator <o> +)
    (<o> ^name add-arg + ^priority 150 + ^main <main> + ^aug aug +
           ^arg <arg> + ^link <link> + ^kind single-side +
           ^order <main-count> + ^level-two-order <arg-count> +
            +)
}


sp {|interpret*propose*A*as*adj-auging-noun|
    (state <s> ^io <i*1> ^count <count>)
    (<i*1> ^lgsentence <cs>)
    (<cs> ^count <count> ^words <w*1> ^links <l*1>)
    (<w*1> ^word <arg> ^word <main>)
    (<arg> ^wcount <arg-count>)
    (<main> ^wcount <main-count> ^ref <ref>)
    (<l*1> ^link <link>)
    (<link> -^handled-as <h*1> ^lwleft <arg-count> ^lwright <main-count>
          ^ltype |A| )
    -->
    (<s> ^operator <o> +)
    (<o> ^name add-arg + ^priority 150 + ^main <main> + ^aug aug1 + 
           ^arg <arg> + ^link <link> + ^kind single-side +
           ^order <main-count> + ^level-two-order <arg-count> +
            +)
}

## nothing from numbers.soar for now

## nothing from relative-clauses2.soar

## from negative-determiners.soar


sp {interpret*propose*D*as*negative-description
	(state <s> ^count <count> ^io.lgsentence <cs>)
	(<cs> ^count <count> ^links.link <link> ^words.word <neg-desc> <main>)
	(<main> ^ref <ref> ^wcount <main-count>)
	(<neg-desc> ^wvalue << no >> ^wcount <neg-desc-count>)
	(<link> ^ltype D ^lwleft <neg-desc-count> ^lwright <main-count> -^handled-as)
-->
	(<s> ^operator <o> +)
	(<o> ^name add-arg ^priority 170 ^main <main> ^aug desc ^arg <desc> ^link <link>
		 ^kind constant ^order <neg-desc-count> ^level-two-order <main-count> )
	(<desc> ^word <neg-desc> ^feature neg)
}

## nothing from two-internal-args.soar


# sp {global*implement*start-next-sentence
#   (state <s> ^impasse no-change ^superstate <ss>)
#   (<ss> ^superstate <sss>)
#   (<sss> ^superstate nil -^io.lgsentence ^operator.name start-next-sentence)
# -->
#   (<s> ^halt immediately)
# }


## from nocompletionprods.soar


# sp {halt*didnt-complete*nothing-dumped
#   (state <s9> ^attribute state ^choices none ^impasse no-change ^quiescence t
#        ^superstate <s8> ^type state)
#   (state <s8> ^attribute state ^choices none ^impasse no-change ^quiescence t
#        ^superstate <s7> ^type state)
#   (state <s7> ^attribute state ^choices none ^impasse no-change ^quiescence t
#        ^superstate <s6> ^type state)
#   (state <s6> ^attribute operator ^choices none ^impasse no-change ^quiescence t
#        ^superstate <s1> ^type state)
#   (state <s1> ^superstate nil)
# -{(<s1> ^model.idea.annotation << feat-dumped pred-dumped >>)}
# -->
#    (halt)
# }

# sp {halt*didnt-complete
#   (state <s9> ^attribute state ^choices none ^impasse no-change ^quiescence t
#        ^superstate <s8> ^type state)
#   (state <s8> ^attribute state ^choices none ^impasse no-change ^quiescence t
#        ^superstate <s7> ^type state)
#   (state <s7> ^attribute state ^choices none ^impasse no-change ^quiescence t
#        ^superstate <s6> ^type state)
#   (state <s6> ^attribute operator ^choices none ^impasse no-change ^quiescence t
#        ^superstate <s1> ^type state)
#   (state <s1> ^superstate nil)
# -->
#   (halt)
# }

# sp {halt*operator-tie
#   (state <s1> ^superstate nil)
#   (state <s2> ^attribute operator ^choices multiple ^impasse tie ^quiescence t
#        ^superstate <s1> ^type state)
#   (state <s3> ^attribute state ^choices none ^impasse no-change ^quiescence t
#        ^superstate <s2> ^type state)
#   (state <s4> ^attribute state ^choices none ^impasse no-change ^quiescence t
#        ^superstate <s3> ^type state)
# -->
#   (halt)
# }

# sp {global*apply*processing-complete*nolinks
#     (state <s> ^count <count> ^operator <o> ^refsets <refsets>)
#    -{ (<s> ^anaphor <a*1>)
#       (<a*1> ^centers <c*1>)
#       (<c*1> ^center <c*2>)
#       (<c*2> ^ref <theref>)
#       (<theref> ^pointer <ptr> ^desc <d*1>)
#       (<ptr> -^annotation feat-dumped)
#       (<d*1> ^feature <any>)}
#    -{ (<s> ^model <m*1>)
#       (<m*1> ^idea <idea>)
#       (<idea> -^annotation pred-dumped ^aug <anyaug>)}
#    -{ (<s> ^io.lgsentence <anylgio>)}
#     (<o> ^name processing-complete)
#     (<refsets> ^refs <refs>)
#     (<refs> ^count <count>)
#     -->
# #    (<s> ^badsentence yes +)
#     (<refsets> ^refs <refs> -)
#     (<s> ^halt immediately +)
# }

# new test so nc collection terminates before halting


####### basic stuff for conjunction

sp {global*prefer*operator-with-lowest-order*if-priority-is-equal*use-arg
    (state <s> ^operator <preferred> + ^operator <deferred> +)
    (<preferred> ^main <mainval> ^priority <priority> ^arg.wcount <wc1>)
    (<deferred> ^main <mainval> ^priority <priority> ^arg.wcount {> <wc1> <wc2>})
    -->
    (<s> ^operator <preferred> > <deferred>)
}


