### communicate with the instructor


### case 1: if the agent wants to initiate a conversation, and the purpose of the dialog is to elicit an action/fact out of human

sp {top-state*propose*communicate*case1
   (state <s> ^topstate <s>
   	      -^io.input-link.instructor-messages.message <message>
	      ^interaction.stack <cs>)
   (<cs> ^segment <seg>)
   (<seg> ^purpose <p>
   	  ^initiator agent)
   (<p> ^type get-further-instruction)
-->
   (<s> ^operator <op> +)
   (<op> ^name communicate
   	 ^category communication
	 ^string next-instruction)}


### case 2: if the agent wants to initiate a interaction, and the purpose of the dialog is to to get the next subaction

sp {top-state*propose*communicate*case2
   (state <s> ^topstate <s>
   	      -^io.input-link.instructor-messages.message <message>
	      ^interaction.stack <cs>)
   (<cs> ^segment <seg>)
   (<seg> ^purpose <p>
   	  ^initiator agent)
   (<p> ^type get-next-subaction)
-->
   (<s> ^operator <op> +)
   (<op> ^name communicate
   	 ^category communication
	 ^string next-subaction)}



### if a communicate operator is proposed for a purpose that has been marked conveyed true, retract the proposal

sp {top-state*retract*communicate
   (state <s> ^topstate <s>
   	      ^operator <op>
	      ^interaction.stack <cs>)
   (<cs> ^segment <seg>)
   (<seg> ^purpose.conveyed true)
   (<op> ^name communicate)
-->
   (<s> ^operator <op> -)
}
	      		
### mark a purpose conveyed true, if it has been succesfully communicated
sp {topstate*apply*communicate
   (state <s> ^operator <op> 
   	      ^interaction.stack <cs>)
   (<cs> ^segment.purpose <pur>)
   (<op> ^name communicate
   	 ^status success)
-->
   (<pur> ^conveyed truel)
}

sp {communicate*elaborate*query
   (state <s> ^name communicate
   	      ^superstate.operator <sop>)
   (<sop> ^name communicate
   	  ^string <string>)
-->
   (<s> ^string <string>)
}

sp {communicate*propose*put-on-oplink
   (state <s> ^name communicate
   	      ^string <string>
	      -^io.input-link.instructor-messages.message <ins>)
-->
   (<s> ^operator <op> +)
   (<op> ^name put-on-oplink
   	 ^category communication
	 ^kind non-atomic
   	 ^information <string>)
}

sp {communicate*apply*put-on-oplink
   (state <s> ^name communicate
   	      ^operator <op> 
	      ^io.output-link <ol>
	      ^superstate.operator <sop>)
   (<op> ^name put-on-oplink
   	 ^information <string>)
-->
   (<ol> ^send-message <message>)
   (<message> ^string <string>
   	      ^next nil)
   (dont-learn <s>)
}

sp {communicate*set*status*success
   (state <s> ^name communicate
   	      ^io.output-link <ol>
	      ^superstate.operator <sop>)
   (<ol> ^send-message <message>)
-->
  (<sop> ^status success)
}
	

### setting preferences wrt primitive actions

sp {preference*communicate*actions
   (state <s> ^operator <op1> +
   	      ^operator <op2> +) 
   (<op2> ^category communication)
   (<op1> ^category primitive-action)
-->
   (<s> ^operator <op2> > <op1>)
}

sp {preference*communicate*sub-primitive-actions
   (state <s> ^operator <op1> +
   	      ^operator <op2> +) 
   (<op2> ^category communication)
   (<op1> ^category sub-primitive-action)
-->
   (<s> ^operator <op2> > <op1>)
}


### setting preferences wrt interaction-stack operators

sp {preference*communicate*interaction-stack
   (state <s> ^operator <op1> +
   	      ^operator <op2> +)
   (<op1> ^category communication)
   (<op2> ^category interaction-stack)
-->
   (<s> ^operator <op1> < <op2>)
}