#### new search control for the selection space

sp {selection*propose*find-next-sub-action
   (state <s> ^name selection
   	      ^superstate.superstate.epmem.result.memory-id <mem-id>
	      -^next-id <nid>)
-->
   (<s> ^operator <op> + >)
   (<op> ^name find-next-subaction
   	 ^after-id <mem-id>)
}

sp {selection*retrieve*next-subaction
   (state <s> ^name selection
   	      ^next-id <nid>
	      ^epmem.command <ecomm>)
-->
   (<ecomm> ^retrieve <nid>)
}

sp {selection*prefer*action*from*retrieved*episode
   (state <s> ^name selection
   	      ^epmem.result.retrieved <ret>
	      ^operator <op> +)
   (<op> ^name evaluate-operator
   	 ^superoperator <sop>)
   (<ret> ^instructor-message.information.verb <subaction>)
   (<sop> ^name <subaction>)
-->
   (<s> ^operator <op> >)
}

### ----------------- find-next-sub-action
sp {find-next-subaction*elaborate*begin-id
   (state <s> ^name find-next-subaction
   	      ^superstate.operator <sop>)
   (<sop> ^name find-next-subaction
   	  ^after-id <mem-id>)
-->
   (<s> ^after-id <mem-id>)
   (dont-learn <s>)
}

sp {find-next-subaction*propose*set-before-id
   (state <s> ^name find-next-subaction
   	      -^before-id <any>)
  -->
   (<s> ^operator <op> + >)
   (<op> ^name set-before-id)
}


sp {find-next-subaction*apply*set-before-id
   (state <s> ^operator <op> 
   	      ^name find-next-subaction
	      ^epmem.present-id <pid>)
   (<op> ^name set-before-id)
-->
   (<s> ^before-id <pid>)
}
   	      

sp {find-next-subaction*query*epmem
   (state <s> ^name find-next-subaction
   	      ^epmem.command <ecomm>
	      ^learning-operator <verb-name>
	      ^after-id <aid>
	      ^before-id <bid>
	      -^failed-query <q>)
-->
  (<s> ^operator <op> + >)
  (<op> ^name find-episode
  	^after-id <aid>
	^before-id <bid>
	^learning-operator <verb-name>)
}


sp {find-next-subaction*write-result-superstate
   (state <s> ^superstate <ss>
   	      ^failed-query <q>
	      ^before-id <bid>)
-->
   (<ss> ^next-id <bid>)
}


### --------- find-episode

### given a set of before-id, after-id, learning-operator, find episode, if no such episode exist; return failure

sp {find-episode*elaborate*state
   (state <s> ^name find-episode
   	      ^superstate.operator <sop>)
   (<sop> ^name find-episode
   	  ^after-id <aid>
	  ^before-id <bid>
	  ^learning-operator <verb-name>)
-->
   (<s> ^after-id <aid>
   	^before-id <bid>
	^learning-operator <verb-name>)
   (dont-learn <s>)
}

sp {find-episode*cue-epmem
   (state <s> ^name find-episode
   	      ^after-id <aid>
	      ^before-id <bid>
	      ^learning-operator <verb-name>
	      ^epmem.command <ecomm>)
-->
  (<ecomm> ^query <q>) 
  (<q> ^interaction.stack.segment <top>
       ^instructor-message <im>)
  (<im> ^event-type action-command)
  (<top> ^purpose <p>
  	 ^next.purpose <np>)
  (<p> ^type get-next-subaction)
  (<np> ^type external-action
  	^satisfaction <nps>)
  (<nps> ^action-event.verb <verb-name>)
  (<ecomm> ^before <bid>
  	   ^after <aid>)
}

sp {find-episode*failure
   (state <s> ^name find-episode
   	      ^epmem.result <eres>
	      ^superstate <ss>)
   (<eres> ^failure <query>)
-->
   (<ss> ^failed-query <query>)
}

sp {find-episode*failure*2
   (state <s> ^name find-episode
   	      ^epmem.result.memory-id <mid>
	      ^superstate <ss>
	      ^after-id <mid>)
-->
   (<ss> ^failed-query <mid>)
}

sp {find-episode*failure*3
   (state <s> ^name find-episode
   	      ^epmem.result <res>
	      ^superstate <ss>)
   (<res> ^normalized-match-score <match> < 1)
-->
   (<ss> ^failed-query <mid>)
}

sp {find-episode*success
   (state <s> ^name find-episode
   	      ^epmem.result <eres>
	      ^superstate <ss>
	      ^after-id <aid>)
   (<ss> ^before-id <bid>)
   (<eres> ^retrieved <ret>
   	   ^memory-id <id> > <aid>)
   (<eres> ^graph-match 1)
-->
   (<ss> ^before-id <bid> -
   	 ^before-id <id>)
}

