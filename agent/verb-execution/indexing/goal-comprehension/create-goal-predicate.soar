#### retrieve goal-id, this state will retract if this knowledge already exists, no need to re-learn this knowledge
# sp {retrieve*goal-id
#    (state <s> ^name create-goal-predicate
#    	      ^smem.command <scomm>
# 	      ^superstate.operator.goal-id <gid>)
# -->
#    (<scomm> ^retrieve <gid>)
# }

### delete retrieve command
#sp {delete*retrieve
#   (state ^name create-goal-predicate
#   	  ^smem.command <scomm>	  ^superstate.operator.goal-id <gid>)
#-->
#   (<scomm> ^retrieve <gid>)
#}



#### create state
sp {elaborate*create-goal-predicate
   (state <s> ^name create-goal-predicate
   	      ^superstate <ss>)
   (<ss> ^operator <sop>)
   (<sop> ^name create-goal-predicate
   	  ^goal-id <gid>
	  ^information <pred>
	  ^map-id <map>
	  ^indexed-operator <iop>)
-->
   (<s> ^preposition-id <id>	
   	^information <pred>
	^map-id <map>
	^bit flip
	^indexed-operator <iop>
	^relation <rel>
	^goal-id <gid>)
}	


### elaborate preposition-id
sp {elaborate*preposition-id
   (state <s> ^preposition-id <id>
   	      ^information <info>)
   (<info> ^word <prep-word>)
-->
   (<id> ^word <prep-word>)
   (<s> ^spatial-relationship <rel>)
   (<rel> ^preposition <prep-word>)
}

### elaborate concept-id on index-argument operator
sp {elaborate*concept-id*create-goal-predicate
   (state <s> ^name create-goal-predicate
   	      ^spatial-relationship <rel>
	      ^operator <op>
	      ^information <info>)
   (<op> ^name index-argument
   	 ^preposition <p>
	 ^argument <arg>)
   (<rel> ^preposition <p>
   	  ^concept-id <cid>)
   (<info> ^{<argattr> <> word} <obj>)
   (<obj> ^object <arg>)
-->
   (<op> ^connector <argattr>)
}

#### index arguments
sp {propose*index*argument
   (state <s> ^name create-goal-predicate
   	      ^information <info>
	      ^bit flip
	      ^preposition-id <id>)
   (<info> ^{<argattr> <> word} <obj>)
   (<obj> ^object <arg>)
   (<id> -^<argattr> <anything>
   	 ^word <prep>)
-->
   (<s> ^operator <op> + =)
   (<op> ^name index-argument
   	 ^category indexing
	 ^preposition <prep>
	 ^cue <id>
	 ^argument <arg>)
}


#### using dialog context, resolve the referent
#### improper dialog context

sp {create*relation*visual-objects
   (state <s> ^name create-goal-predicate
   	      ^preposition-id <id>
	      ^relation <rel>
	      ^indexed-operator <iop>
	      ^map-id.procedural <map>)
   (<id> ^{<arg> <> word} <obj>)
   (<iop> ^<op-arg> <obj>)
   (<map> ^<op-arg> <sobj>)
-->
   (<rel> ^<arg> <sobj>)
}

sp {create*relation*semantic-object
   (state <s> ^name create-goal-predicate
   	      ^preposition-id <id>
	      ^relation <rel>
	      ^indexed-operator <iop>
	      ^map-id.procedural <map>
	      ^smem.command <scomm>)
   (<id> ^{<arg> <> word} <obj>)
   (<iop> -^<op-arg> <obj>)
-->
   (<rel> ^<arg> <obj>)
   (<scomm> ^store <obj>)
}


sp {create*relation*semantic-object*substructure
   (state <s> ^name create-goal-predicate
	      ^relation <rel>
	      ^smem.command <scomm>)   
   (<rel> ^<arg> <obj>)
   (<scomm> ^store <obj>)
   (<obj> ^<oarg> <oval>)
   (<oval> ^<oval-arg> <ovval>)
-->
   (<scomm> ^store <oval>
   	    ^store <ovval>)
}



### write to the superstate
sp {write*superstate
   (state <s> ^superstate <ss>
   	      ^impasse no-change
	      ^attribute state
	      ^spatial-relationship <rel>)
   (<rel> ^preposition <pword>
   	  ^concept-id <cid>)
   (<ss> ^name create-goal-predicate
   	      ^relation <rel>
	      ^goal-id <gid>
	      ^superstate <sss>
	      ^preposition-id.word <pword>)
   (<rel> ^<sub> <structure>)
-->
   (<gid> ^<cid> <rel>)
   (<sss> ^bit flip)
}

