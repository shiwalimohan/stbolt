### composite operator has the following argumentation
### object arguments
### _metadata

### information stored in semantic memory
### problem-space
### goal
### linguistic-mapping
### operator template


##
##
## General application rules for composite operators
##

### elaborate composite-operator
sp {elaborate*composite-operators
   (state <s> ^superstate.operator <sop>
   	      ^name <sname>)
   (<sop> ^_metadata <met>
	  ^name <sname>)
   (<met> ^procedural-id <map>)
-->
   (<s> ^procedural-id <map>)
}

### query semantic-memory to retrieve map-id
sp {query*semantic-memory*for*map-id*composite-operator*application
   (state <s> ^procedural-id <proc>
   	      ^smem.command <scomm>
	      ^superstate.operator <sop>
   	      ^name <sname>
	      -^name assign-goal)
   (<sop> ^name <sname>)
-->
   (<scomm> ^query <cue>)
   (<cue> ^procedural <proc>)
}

### elaborate map-id composite-operator
sp {elaborate*map-id*composite-operator
   (state <s> ^smem.result.retrieved <ret>
   	      ^procedural-id <proc>
   	      ^superstate.operator <sop>
   	      ^name <sname>)
   (<sop> ^name <sname>)
   (<ret> ^goal <goal-id>
   	  ^problem-space <ps-id>)
-->
   (<s> ^map-id <ret>
   	^goal-id <goal-id>
	^problem-space-id <ps-id>)
}

### retrieve and assign goal to composite-operators
sp {composite-operator*propose*assign-goal
   (state <s> ^name <sname>
	      -^desired <any>
	      ^goal-id <glid>
	      ^procedural-id <pid>
	      ^superstate.operator <sop>
	      -^name explain)
-->
   (<s> ^operator <op> + >)
   (<op> ^name assign-goal
   	 ^long-term-id <glid>
	 ^procedural-id <pid>
	 ^category explanation
	 ^superoperator <sop>)
}


## retrieve and assign the problem-space for composite-operators
sp {composite-operator*propose*assign-problem-space
   (state <s> ^name <sname>
	      ^desired <any>
	      -^generated
	      ^map-id <map>
	      ^problem-space-id <pid>
	      ^learning-operator <sname>) ## we want this step to occur only in the deliberate explanation
-->
   (<s> ^operator <op> + >)
   (<op> ^name assign-problem-space
   	 ^problem-space-id <pid>
	 ^map-id <map>)
}


### after a problem-space is assigned, the learned selection chunks will fire and apply the composite-operator. 


## mark successful application of a composite-operator;
sp {propose*composite*operator*elaborate*success
   (state <s> ^name <sname>
   	      ^superstate <ss>
	      -^learning-operator <any>)
   (<ss> ^operator <sop>
   	 ^indexed-operator <iop>)
   (<sop> ^category composite-action)
   (<sop> ^name <sname>)
   (<s> ^desired <d>
   	^success <d>)
-->
   (<s> ^operator <op> + > !)
   (<op> ^name mark-success
	 ^indexed-operator <iop>
	  ^category explanation)
}

### plugin into the interaction stack; this will cause retraction of the composite-operator once its goal/desired state is reached.
sp {apply*composite*operator*elaborate*success
   (state <s> ^operator <op>
   	      ^superstate <ss>
	      ^topstate.status <status>)
   (<op> ^name mark-success
	 ^indexed-operator <iop>)
   (<iop> ^information <info>)
 -->
   (<ss> ^indexed-operator <iop> -)
   (<status> ^performed.action-event <e>)
   (<e> ^type <info>)
}






