# Adds a segment to the interaction stack to deal with the object question

sp {propose*push-object-question
   (state <s> ^topstate <s>
              ^instructor-message.type object-question)
-->
   (<s> ^operator <o> +)
   (<o> ^name push-object-question
        ^category communication)
}

sp {apply*push-object-question
   (state <s> ^operator.name push-object-question
              ^instructor-message <msg>)
   (<msg> ^information.object <desc>)
-->
   (<msg> ^purpose <p>)
   (<p> ^type object-question
        ^parameters <params>
        ^satisfaction <sat>)
   (<sat> ^action-event point)
   (<params> ^description <desc>)
}

# Returns points to the described object

sp {object-question*propose*find-object
   (state <s> ^topstate <s>
             -^instructor-message <msg>
              ^interaction.stack.segment.purpose <p>)
   (<p> ^type object-question)
-->
   (<s> ^operator <o> +)
   (<o> ^name find-object
        ^category object-processing)
}

sp {object-question*find-object*elaborate*word
   (state <s> ^operator <o> +
              ^interaction.stack.segment.purpose <p>)
   (<p> ^type object-question
        ^parameters.description.word {<word> <> object })
   (<o> ^name find-object)
-->
   (<o> ^word <word>)
}

sp {object-question*apply*find-object
   (state <s> ^operator <o>
              ^interaction.stack.segment.purpose.type object-question
              ^status <status>)
   (<o> ^name find-object
        ^match <m>)
-->
   (<status> ^performed.action-event point)
}

sp {recogition-question*apply*find-object*point
   (state <s> ^operator <o>
              ^io.output-link <out>
              ^topstate.object <obj>
              ^interaction.stack.segment.purpose.type object-question)
   (<o> ^name find-object
        ^match.id <id>)
   (<obj> ^id <id>
          ^pose <pose>)
-->
   (<out> ^point <point>)
   (<point> ^id <id>
            ^pose <pose>)
}