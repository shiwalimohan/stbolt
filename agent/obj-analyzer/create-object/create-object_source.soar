# create-object
#	When an object comes in on the input link this operator
#		creates a working memory representation of that object
#	It also uses semantic memory to match internal terms for attributes and values
#		to external words if it has that knowledge

source propose*create-object.soar
# Proposes create-object if there is an object on the input link not in working memory
#	Enters a substate to do the creation

source init-create-object.soar
# Creates the initial object structure in the substate

source copy-att-val.soar
#   Copies each attribute/value pair from the input link into the
#     internal representation of that object

source retrieve-att.soar
#   If a retrieval hasn't yet been tried for that attribute, it queries smem

source retrieve-val.soar
#   If a retrieval hasn't yet been tried for that value, it queries smem

source process-att-query.soar
#   When the results from an attribute query to SM are ready this operator processes them
#		by updating the internal representation with the matching

source process-val-query.soar
#   When the results from a value query to SM are ready this operator processes them
#		by updating the internal representation with the matching

source preferences.soar
#	Organizes preferences so that the order of operators is as follows:
#	init-create-object, copy-att-val, retrieve-att then process-att-query, 
#				retrieve-val then process-val-query, complete-create-object

source complete-create-object.soar
# 	When nothing more can be done to create the object, it copies the result
#   to the superstate (will retract the create-object operator)